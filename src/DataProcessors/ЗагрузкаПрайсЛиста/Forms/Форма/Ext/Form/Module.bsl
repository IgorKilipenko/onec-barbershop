#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(_, __)
    // Инициализация состояния формы
    ЭтотОбъект._Состояние = Новый Структура;
    ЭтотОбъект._Состояние.Вставить("СоздательФормы");
    ЭтотОбъект._Состояние.Вставить("ПрайсЛистЗаполнен", Ложь);

    создательФормы = Неопределено;
    Параметры.Свойство("СоздательФормы", создательФормы);
    ЭтотОбъект._Состояние.СоздательФормы = создательФормы;

    // Если форма подчинена форме документа - создателю
    Если ТипЗнч(создательФормы) <> Неопределено Тогда
        Параметры.Свойство("Дата", Объект.ДатаПрайсЛиста);
        Параметры.Свойство("Контрагент", Объект.Поставщик);

        Если Объект.ДатаПрайсЛиста <> Неопределено Тогда
            Элементы.ДатаПрайсЛиста.Доступность = НЕ ЗначениеЗаполнено(Объект.ДатаПрайсЛиста);
        КонецЕсли;

        Если Объект.Поставщик <> Неопределено Тогда
            Элементы.Поставщик.Доступность = НЕ ЗначениеЗаполнено(Объект.Поставщик);
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(_)
    обновитьСостояниеФормы();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

// Выполняет загрузку прайс-листа из файла табличных данных
// Параметры:
//  _ - Неопределено - [Команда] - Не используется
&НаКлиенте
Асинх Процедура ЗагрузитьПрайсЛист(_)
    результат = Ждать вывестиПрайсЛист();
    ЭтотОбъект._Состояние.ПрайсЛистЗаполнен = результат ИЛИ Объект.ПрайсЛист.ВысотаТаблицы > 0;
    обновитьСостояниеФормы();
КонецПроцедуры

// Передает данные прайс листа (ТабличныйДокумент) через оповещение
// Параметры:
//  _ - Неопределено - [Команда] - Не используется
&НаКлиенте
Процедура ПоместитьВДокумент(_)
    имяСобытия = "ЗаписьПрайсЛистаВДокумент";
    параметрыОповещенияЗаписиПрайсЛиста = Новый Структура("Объект, СоздательФормы",
            ЭтотОбъект.Объект, _Состояние.СоздательФормы);
    Оповестить(имяСобытия, параметрыОповещенияЗаписиПрайсЛиста, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

// Заполняет табличный документ из файла в реквизит формы ПрайсЛист
// Возвращаемое значение:
//  - Булево
&НаКлиенте
Асинх Функция вывестиПрайсЛист()
    файлТабличныхДанных = Ждать загрузитьТабличныйФайлДанных();
    Если файлТабличныхДанных = Неопределено Тогда
        Возврат Ложь; // Файл не выбран
    КонецЕсли;

    Попытка
        вывестиПрайсЛистФормыНаСервере(
            файлТабличныхДанных.ИмяВременногоФайла,
            файлТабличныхДанных.ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя);
    Исключение
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = СтрШаблон(
                "Ошибка чтения фала прайс-листа: ""%1"".
                |Описание ошибки: %2",
                файлТабличныхДанных.ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя,
                ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
        сообщение.Сообщить();

        таблДок = Неопределено;
    КонецПопытки;

    Возврат Истина;
КонецФункции

// Заполняет табличный документ из файла в реквизит формы ПрайсЛист
// Параметры:
//  имяВременногоФайла - Строка
//  имяИсходногоФайла - Строка
//  удалитьФайл - Булево - Если Истина - исходный файл будет удален после чтения
// Возвращаемое значение:
//  - Булево
&НаСервере
Функция вывестиПрайсЛистФормыНаСервере(Знач имяВременногоФайла, Знач имяИсходногоФайла, Знач удалитьФайл = Истина)
    таблДок = Неопределено;
    Объект.ПрайсЛист.Очистить();

    Попытка
        таблДок = получитьТабличныйДокументИзФайлаНаСервере(имяВременногоФайла);

    Исключение
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = СтрШаблон(
                "Ошибка чтения фала прайс-листа: ""%1"".
                |Описание ошибки: %2",
                имяИсходногоФайла,
                ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
        сообщение.Сообщить();

        таблДок = Неопределено;
    КонецПопытки;

    Если удалитьФайл Тогда
        удалитьФайлИзВременногоХранилищаНаСервере(имяВременногоФайла);
    КонецЕсли;

    Если таблДок = Неопределено Тогда
        Возврат Ложь;
    КонецЕсли;

    Объект.ПрайсЛист.Вывести(таблДок);

    Возврат Истина;
КонецФункции

// Открывает диалоговое окно выбора файла на клиенте.
// Выбранный файл помещается во временное хранилище на сервере
&НаКлиенте
Асинх Функция загрузитьТабличныйФайлДанных()
    параметрыВыбораФайла = Новый ПараметрыДиалогаПомещенияФайлов(
            "Выбор файла прайс-листа", Ложь, "Файл данных (*.xls, *.xlsx, *.ods)|*.xls;*.xlsx;*.ods");
    описаниеФайлаДанных = Ждать ПоместитьФайлНаСерверАсинх( , , , параметрыВыбораФайла, ЭтотОбъект.УникальныйИдентификатор);

    Если описаниеФайлаДанных = Неопределено Тогда
        Возврат Неопределено; // Файл не выбран
    КонецЕсли;

    ДиагностикаКлиентСервер.Утверждение(описаниеФайлаДанных.ПомещениеФайлаОтменено = Ложь
            И описаниеФайлаДанных.Адрес <> Неопределено,
            "Файл должен быть помещен в хранилище.");

    имяФайлаДанных = Ждать поместитьФайлВоВременноеХранилищеНаСервере(
            описаниеФайлаДанных.Адрес, описаниеФайлаДанных.СсылкаНаФайл.Расширение);

    Возврат Новый Структура("ИмяВременногоФайла, ОписаниеПомещенногоФайла", имяФайлаДанных, описаниеФайлаДанных);
КонецФункции

// Получает ТабличныйДокумент из файла помещенного во временное хранилище на сервере
// Параметры:
//  имяФайлаДанных - Строка
// Возвращаемое значение:
//  - ТабличныйДокумент
&НаСервереБезКонтекста
Функция получитьТабличныйДокументИзФайлаНаСервере(Знач имяФайлаДанных)
    результат = Новый ТабличныйДокумент;
    результат.Прочитать(имяФайлаДанных);

    Возврат результат;
КонецФункции

// Записывает файл из окружения клиента во временное хранилище на сервере
// Параметры:
//  адрес - Строка - Адрес файла в окружении клиента для получения потока двоичных данных
//  расширение - Строка - Расширение помещаемого файла (прим.: .xls)
// Возвращаемое значение:
//  - Строка
&НаСервереБезКонтекста
Функция поместитьФайлВоВременноеХранилищеНаСервере(Знач адрес, Знач расширение)
    // BSLLS:MissingTemporaryFileDeletion-off
    имяФайлаДанных = ПолучитьИмяВременногоФайла(расширение);
    потокДанных = ПолучитьИзВременногоХранилища(адрес);

    ДиагностикаКлиентСервер.Утверждение(ТипЗнч(потокДанных) = Тип("ДвоичныеДанные"),
            "Данные полученные из временного хранилища должны быть типа: ""ДвоичныеДанные""");

    потокДанных.Записать(имяФайлаДанных);

    Возврат имяФайлаДанных;
КонецФункции

// Удаляет файл из временного хранилища окружения сервера
// Параметры:
//  путьФайлаДанных - Строка - Путь к файлу
// Возвращаемое значение:
//  - Булево
&НаСервереБезКонтекста
Функция удалитьФайлИзВременногоХранилищаНаСервере(Знач путьФайлаДанных)
    Попытка
        УдалитьФайлы(путьФайлаДанных);
    Исключение
        записьОбОшибкеВЖурналРегистрацииНаСервере("ПолучитьТабличныйДокументИзФайла",
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        Возврат Ложь;
    КонецПопытки;

    Возврат Истина;
КонецФункции

// Выполняет запись информации о событии в журнал регистрации сервера
// Параметры:
//  имяСобытия - Строка - Наименование события
//  комментарий - Строка
&НаСервереБезКонтекста
Процедура записьОбОшибкеВЖурналРегистрацииНаСервере(Знач имяСобытия, Знач комментарий)
    ЗаписьЖурналаРегистрации(СтрШаблон("ЗагрузкаПрайсЛиста.%1", имяСобытия), УровеньЖурналаРегистрации.Ошибка, , ,
        ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
КонецПроцедуры

// Выполняет обновление состояний отображения элементов формы
&НаКлиенте
Процедура обновитьСостояниеФормы()
    Элементы.ПрайсЛист.Доступность = ЭтотОбъект._Состояние.ПрайсЛистЗаполнен;
    Элементы.ПоместитьВДокумент.Видимость = получитьЭтоПодчиненнаяФорма() И ЭтотОбъект._Состояние.ПрайсЛистЗаполнен;
    Элементы.ПоместитьВДокумент.Доступность = получитьЭтоПодчиненнаяФорма() И ЭтотОбъект._Состояние.ПрайсЛистЗаполнен;
КонецПроцедуры

// Определяет подчинена ли форма форме документа - создателя
// Возвращаемое значение:
//  - Булево
&НаКлиенте
Функция получитьЭтоПодчиненнаяФорма()
    Возврат ЭтотОбъект._Состояние.СоздательФормы <> Неопределено;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
