#Область ПрограммныйИнтерфейс

// Параметры:
//  сотрудникСсылка - СправочникСсылка.Сотрудники
//  моментВремени - Дата, МоментВремени, Граница, Неопределено
// Возвращаемое значение:
//  - Число, Неопределено
Функция ПолучитьОкладСотрудника(Знач сотрудникСсылка, Знач моментВремени = Неопределено) Экспорт
    кадровыеДанныеСотрудника = ПолучитьКадровыеДанныеСотрудника(сотрудникСсылка, моментВремени);
    Если кадровыеДанныеСотрудника = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Возврат кадровыеДанныеСотрудника.Оклад;
КонецФункции

// Параметры:
//  сотрудникСсылка - СправочникСсылка.Сотрудники
//  моментВремени - Дата, МоментВремени, Граница, Неопределено
// Возвращаемое значение:
//  - Структура, Неопределено
Функция ПолучитьКадровыеДанныеСотрудника(Знач сотрудникСсылка, Знач моментВремени = Неопределено) Экспорт
    поляДанных = "Период, ГрафикРаботы, Оклад, Работает";
    структураПолей = Новый Структура(поляДанных);
    выборка = ПолучитьКадровыеДанные(структураПолей, Новый Структура("Сотрудник, МоментВремени", сотрудникСсылка, моментВремени), Ложь);

    Если выборка = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(структураПолей, выборка, поляДанных);
    Возврат структураПолей;
КонецФункции

// Параметры:
//  структураПолей - Структура, ФиксированнаяСтруктура
//  параметры - Структура, ФиксированнаяСтруктура
//      * МоментВремени - Дата, МоментВремени, Граница, Неопределено
//      * Сотрудник - СправочникСсылка.Сотрудники, Неопределено
//      * График - СправочникСсылка.ГрафикиРаботыСотрудников, Неопределено
//      * ВыбратьРазрешенные - Булево
//  выгрузить - Булево - Если Истина - результат будет возвращен в виде ТаблицаЗначений, по умолчанию: Истина
// Возвращаемое значение:
//  - ТаблицаЗначений, РезультатВыборки, Неопределено
Функция ПолучитьКадровыеДанные(Знач структураПолей, Знач параметры, выгрузить = Неопределено) Экспорт
    выгрузить = ?(выгрузить = Неопределено, Истина, выгрузить);

    запрос = сформироватьЗапросСрезПоследнихПоРеквизитам(структураПолей, параметры);
    результатЗапроса = запрос.Выполнить();

    Если результатЗапроса.Пустой() Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если выгрузить Тогда
        Возврат результатЗапроса.Выгрузить();
    Иначе
        Возврат результатЗапроса.Выбрать();
    КонецЕсли;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  структураПолей - Структура, ФиксированнаяСтруктура
//  параметры - Структура, ФиксированнаяСтруктура
//      * МоментВремени - Дата, МоментВремени, Граница, Неопределено
//      * Сотрудник - СправочникСсылка.Сотрудники, Неопределено
//      * График - СправочникСсылка.ГрафикиРаботыСотрудников, Неопределено
//      * ВыбратьРазрешенные - Булево
// Возвращаемое значение:
//  - Запрос
Функция сформироватьЗапросСрезПоследнихПоРеквизитам(Знач структураПолей, Знач параметры)
    параметры = ?(параметры = Неопределено, Новый Структура("МоментВремени, ВыбратьРазрешенные", Неопределено, Ложь), параметры);

    #Область Диагностика
    ДиагностикаКлиентСервер.Утверждение(
        ТипЗнч(структураПолей) = Тип("Структура") ИЛИ ТипЗнч(структураПолей) = Тип("ФиксированнаяСтруктура"),
            "Аргумент ""СтруктураПолей"" должен иметь тип ""[Фиксированная]Структура"".");
    ДиагностикаКлиентСервер.Утверждение(
        ТипЗнч(параметры) = Тип("Структура") ИЛИ ТипЗнч(параметры) = Тип("ФиксированнаяСтруктура"),
            "Аргумент ""Параметры"" должен иметь тип ""[Фиксированная]Структура"".");
    #КонецОбласти // Диагностика

    выбратьРазрешенные = ?(параметры.Свойство("ВыбратьРазрешенные"), параметры.ВыбратьРазрешенные, Ложь);
    моментВремени = ?(параметры.Свойство("МоментВремени"), параметры.МоментВремени, Неопределено);
    сотрудник = ?(параметры.Свойство("Сотрудник"), параметры.Сотрудник, Неопределено);
    график = ?(параметры.Свойство("График"), параметры.График, Неопределено);
    условие = Неопределено;

    текстЗапросаПолей = РаботаСРеквизитами.СформироватьТекстЗапросаПолейПоРеквизитам(
            структураПолей, "КадроваяИсторияСотрудниковСрезПоследних");
    текстЗапросаПолей = ?(ПустаяСтрока(текстЗапросаПолей), "*", текстЗапросаПолей);

    запрос = Новый Запрос;
    запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |&ТекстЗапросаПолей
        |ИЗ
        |	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&ПараметрыВТ) КАК КадроваяИсторияСотрудниковСрезПоследних
        |";

    параметрыВТ = "&МоментВремени, &Условие";

    Если моментВремени = Неопределено Тогда
        параметрыВТ = СтрЗаменить(параметрыВТ, "&МоментВремени", "");
    Иначе
        запрос.УстановитьПараметр("МоментВремени", моментВремени);
    КонецЕсли;

    Если сотрудник <> Неопределено Тогда
        условие = СтрШаблон("Сотрудник %1 &Сотрудник", ?(РаботаСКоллекциямиКлиентСервер.ЭтоМассив(сотрудник, Ложь), "В", "="));
        запрос.УстановитьПараметр("Сотрудник", сотрудник);
    КонецЕсли;

    Если график <> Неопределено Тогда
        условие = СтрШаблон("%1 %2%3", условие, ?(условие <> Неопределено, "И ", ""), "График = &График");
        запрос.УстановитьПараметр("График", график);
    КонецЕсли;

    Если НЕ выбратьРазрешенные Тогда
        запрос.Текст = СтрЗаменить(запрос.Текст, "РАЗРЕШЕННЫЕ", "");
    КонецЕсли;

    параметрыВТ = СтрЗаменить(параметрыВТ, "&Условие", ?(условие = Неопределено, "", условие));

    запрос.Текст = СтрЗаменить(запрос.Текст, "&ПараметрыВТ", параметрыВТ);
    запрос.Текст = СтрЗаменить(запрос.Текст, "&ТекстЗапросаПолей", текстЗапросаПолей);

    Возврат запрос;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
