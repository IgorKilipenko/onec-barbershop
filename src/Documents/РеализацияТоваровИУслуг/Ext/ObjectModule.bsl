#Область ПрограммныйИнтерфейс

Процедура ОбновитьСтатусОплатыДокумента(Знач принудительно = Истина) Экспорт
    Если принудительно ИЛИ ПризнакОплаты <> Перечисления.ПризнакиОплаты.ПолностьюОплачен Тогда
        ПризнакОплаты = Документы.РеализацияТоваровИУслуг.ПроверитьОплатуДокумента(Ссылка).ПризнакОплаты;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(отказ, __)
    очиститьДвиженияДокумента();
    результатВыполненияДвижений = выполнитьВсеДвиженияДокумента();
    Если НЕ результатВыполненияДвижений.Отказ Тогда
        записатьДвижения();
    Иначе
        отказ = Истина;
    КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(данныеЗаполнения, __)
    Если ТипЗнч(данныеЗаполнения) = Тип("ДокументСсылка.ЗаписьКлиента") Тогда
        ЭтотОбъект.ДатаОказанияУслуги = НачалоМинуты(данныеЗаполнения.ДатаЗаписи);
        ЭтотОбъект.Клиент = данныеЗаполнения.Клиент;
        ЭтотОбъект.Сотрудник = данныеЗаполнения.Сотрудник;
        ЭтотОбъект.ДокументОснование = данныеЗаполнения;

        Для Каждого текСтрокаУслуги Из данныеЗаполнения.Услуги Цикл
            новаяСтрока = Услуги.Добавить();
            новаяСтрока.Количество = текСтрокаУслуги.Количество;
            новаяСтрока.Номенклатура = текСтрокаУслуги.Номенклатура;
            новаяСтрока.Сумма = текСтрокаУслуги.Сумма;
            новаяСтрока.Цена = текСтрокаУслуги.Цена;
        КонецЦикла;

        ЭтотОбъект.СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
    КонецЕсли;

    РаботаСДокументами.ЗаполнитьПолеАвторДокументаНаСервере(ЭтотОбъект);
КонецПроцедуры

Процедура ПередЗаписью(_, __, ___)
    Если ОбменДанными.Загрузка Тогда
        Возврат;
    КонецЕсли;

    СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
    ДатаОказанияУслуги = ?(ЗначениеЗаполнено(ДатаОказанияУслуги), НачалоМинуты(ДатаОказанияУслуги), ДатаОказанияУслуги);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

#Область ЗапросыДанных
Функция получитьВыборкуДокументНоменклатураОстатки(Знач менеджерТаблиц)
    запросОстатков = Новый Запрос;
    запросОстатков.МенеджерВременныхТаблиц = менеджерТаблиц;
    запросОстатков.УстановитьПараметр("Ссылка", Ссылка);
    запросОстатков.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени()));

    текстЗапросаТоваровИУслугДокумента =
        "ВЫБРАТЬ
        |	РеализацияТоваровИУслугТовары.Номенклатура КАК Номенклатура,
        |	РеализацияТоваровИУслугТовары.Склад КАК Склад,
        |	СУММА(РеализацияТоваровИУслугТовары.Количество) КАК Количество,
        |	СУММА(РеализацияТоваровИУслугТовары.Сумма) КАК Сумма
        |ПОМЕСТИТЬ ВТ_Товары
        |ИЗ
        |	Документ.РеализацияТоваровИУслуг.Товары КАК РеализацияТоваровИУслугТовары
        |ГДЕ
        |	РеализацияТоваровИУслугТовары.Ссылка = &Ссылка
        |
        |СГРУППИРОВАТЬ ПО
        |	РеализацияТоваровИУслугТовары.Номенклатура,
        |	РеализацияТоваровИУслугТовары.Склад
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	РеализацияТоваровИУслугУслуги.Номенклатура,
        |	NULL,
        |	СУММА(РеализацияТоваровИУслугУслуги.Количество),
        |	СУММА(РеализацияТоваровИУслугУслуги.Сумма)
        |ИЗ
        |	Документ.РеализацияТоваровИУслуг.Услуги КАК РеализацияТоваровИУслугУслуги
        |ГДЕ
        |	РеализацияТоваровИУслугУслуги.Ссылка = &Ссылка
        | СГРУППИРОВАТЬ ПО
        |	РеализацияТоваровИУслугУслуги.Номенклатура
        |
        |ИНДЕКСИРОВАТЬ ПО
        |	Номенклатура,
        |	Склад
        |;
        |";

    текстЗапросаОстатков =
        "ВЫБРАТЬ
        |	ВТ_Товары.Номенклатура КАК Номенклатура,
        |	ВЫБОР
        |		КОГДА ВТ_Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
        |			ТОГДА ЛОЖЬ
        |		ИНАЧЕ ИСТИНА
        |	КОНЕЦ КАК ЭтоТовар,
        |	ВТ_Товары.Номенклатура.Представление КАК НоменклатураПредставление,
        |	ВТ_Товары.Количество КАК КоличествоВДокументе,
        |	ВТ_Товары.Сумма КАК СуммаВДокументе,
        |	ВТ_Товары.Склад КАК Склад,
        |	ТоварыНаСкладахОстатки.СрокГодности КАК СрокГодности,
        |	ЕстьNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
        |	ЕстьNULL(ТоварыНаСкладахОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
        |	ВТ_Товары.Номенклатура.СтатьяЗатрат КАК СтатьяЗатрат,
        |   ВТ_Товары.Номенклатура.СчетБухгалтерскогоУчета КАК СчетБухгалтерскогоУчета
        |ИЗ
        |	ВТ_Товары КАК ВТ_Товары
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
        |			&МоментВремени,
        |			(Номенклатура, Склад) В (
        |				ВЫБРАТЬ
        |					ВТ_Товары.Номенклатура,
        |					ВТ_Товары.Склад
        |				ИЗ
        |					ВТ_Товары КАК ВТ_Товары)) КАК ТоварыНаСкладахОстатки
        |		ПО ВТ_Товары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
        |			И ВТ_Товары.Склад = ТоварыНаСкладахОстатки.Склад
        |
        |УПОРЯДОЧИТЬ ПО
        |	ТоварыНаСкладахОстатки.СрокГодности
        |ИТОГИ
        |	МАКСИМУМ(КоличествоВДокументе),
        |	МАКСИМУМ(СуммаВДокументе),
        |	СУММА(КоличествоОстаток)
        |ПО
        |	Номенклатура
        |";

    запросОстатков.Текст = СтрШаблон("%1%2", текстЗапросаТоваровИУслугДокумента, текстЗапросаОстатков);

    Возврат запросОстатков.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
КонецФункции

Функция получитьВыборкуПревышенияОстатковЗаказыКлиентов(Знач менеджерТаблиц) // => Выборка | Неопределено
    запросЗаказыКлиентовОстатки = Новый Запрос;
    запросЗаказыКлиентовОстатки.МенеджерВременныхТаблиц = менеджерТаблиц;

    запросЗаказыКлиентовОстатки.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени()));
    запросЗаказыКлиентовОстатки.УстановитьПараметр("Клиент", Клиент);
    запросЗаказыКлиентовОстатки.УстановитьПараметр("ДатаЗаписи", ДатаОказанияУслуги);

    запросЗаказыКлиентовОстатки.Текст =
        "ВЫБРАТЬ
        |	ЗаказыКлиентовОстатки.КоличествоОстаток КАК КоличествоОстаток,
        |	ЗаказыКлиентовОстатки.Клиент КАК Клиент,
        |	ЗаказыКлиентовОстатки.ДатаЗаписи КАК ДатаЗаписи,
        |	ЗаказыКлиентовОстатки.Клиент.Представление КАК КлиентПредставление,
        |	ЗаказыКлиентовОстатки.Номенклатура КАК Номенклатура,
        |	ЗаказыКлиентовОстатки.Номенклатура.Представление КАК НоменклатураПредставление
        |ИЗ
        |	РегистрНакопления.ЗаказыКлиентов.Остатки(
        |			&МоментВремени,
        |			Клиент = &Клиент
        |				И ДатаЗаписи = &ДатаЗаписи
        |				И Номенклатура В
        |					(ВЫБРАТЬ
        |						ВТ_Товары.Номенклатура
        |					ИЗ
        |						ВТ_Товары КАК ВТ_Товары
        |					ГДЕ
        |						ВТ_Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))) КАК ЗаказыКлиентовОстатки
        |ГДЕ
        |	ЗаказыКлиентовОстатки.КоличествоОстаток < 0
        |";

    результатЗапроса = запросЗаказыКлиентовОстатки.Выполнить();
    Возврат ?(результатЗапроса.Пустой(), Неопределено, результатЗапроса.Выбрать());
КонецФункции
#КонецОбласти // ЗапросыДанных

#Область Движения
Процедура записатьДвижения()
    Движения.ТоварыНаСкладах.Записывать = Истина;
    Движения.Продажи.Записывать = Истина;
    Движения.УчетЗатрат.Записывать = Истина;
    Движения.Хозрасчетный.Записывать = Истина;

    // Для контроля остатков по новому способу
    // От этой строки можно избавиться, т.к. запись включается при контроле остатков
    Движения.ЗаказыКлиентов.Записывать = Истина;
    Движения.ЗаказыКлиентов.Записать();
КонецПроцедуры

Процедура очиститьДвиженияДокумента()
    Движения.ТоварыНаСкладах.Записывать = Истина;
    Движения.Продажи.Записывать = Истина;
    Движения.УчетЗатрат.Записывать = Истина;
    Движения.Хозрасчетный.Записывать = Истина;

    Движения.Записать();
КонецПроцедуры

Функция выполнитьВсеДвиженияДокумента()
    результатВыполнения = Новый Структура("Отказ", Ложь);
    менеджерТаблиц = Новый МенеджерВременныхТаблиц;

    блокировка = получитьБлокировкуИзмененияТоварыНаСкладах();
    блокировка.Заблокировать();

    этоРеализацияНаОснованииЗаписиКлиента = получитьЭтоРеализацияНаОснованииЗаписиКлиента();
    выборкаНоменклатураДокумента = получитьВыборкуДокументНоменклатураОстатки(менеджерТаблиц);
    Пока выборкаНоменклатураДокумента.Следующий() Цикл
        этоТовар = выборкаНоменклатураДокумента.ЭтоТовар;
        Если этоТовар Тогда
            Если проверитьПревышениеОстатков(
                    выборкаНоменклатураДокумента.КоличествоВДокументе,
                    выборкаНоменклатураДокумента.КоличествоОстаток,
                    выборкаНоменклатураДокумента.НоменклатураПредставление) Тогда
                результатВыполнения.Отказ = Истина;
            КонецЕсли;

            Если результатВыполнения.Отказ Тогда
                Продолжить;
            КонецЕсли;

            стоимостьОбщая = выполнитьДвижениеТоварыНаСкладахРасходПоПартиям(выборкаНоменклатураДокумента);
            выполнитьДвижениеУчетЗатратОборот(выборкаНоменклатураДокумента, стоимостьОбщая);
        Иначе
            Если этоРеализацияНаОснованииЗаписиКлиента Тогда
                выполнитьДвижениеЗаказыКлиентовРасход(выборкаНоменклатураДокумента);
                контрольЗаказовУспешно = выполнитьКонтрольОстатковДляЗаказыКлиентов(менеджерТаблиц);
                Если НЕ контрольЗаказовУспешно Тогда
                    результатВыполнения.Отказ = Истина;
                    Продолжить;
                КонецЕсли;
            КонецЕсли;
        КонецЕсли;

        выполнитьДвижениеПродажиОборот(выборкаНоменклатураДокумента);
    КонецЦикла;

    Если НЕ результатВыполнения.Отказ Тогда
        выполнитьДвижениеБУХозрасчетныйВыручкаОтПродаж();
    КонецЕсли;

    Возврат результатВыполнения;
КонецФункции

Процедура выполнитьДвижениеБУХозрасчетныйСписаниеПартииТоваров(Знач счетКт, Знач номенклатураСсылка, Знач суммаСписания)
    движение = Движения.Хозрасчетный.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.Сумма = суммаСписания;
    движение.СчетДт = ПланыСчетов.Хозрасчетный.Продажи;
    движение.СчетКт = счетКт;
    движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура] = номенклатураСсылка;
    движение.Содержание = "Списана себестоимость товарно-материальных ценностей";
КонецПроцедуры

Процедура выполнитьДвижениеБУХозрасчетныйВыручкаОтПродаж()
    движение = Движения.Хозрасчетный.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.Сумма = ЭтотОбъект.СуммаДокумента;
    движение.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
    движение.СчетКт = ПланыСчетов.Хозрасчетный.Продажи;
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетДт, движение.СубконтоДт, Клиент);
    движение.Содержание = "Отражена выручка от реализации товаров и услуг";
КонецПроцедуры

Процедура выполнитьДвижениеПродажиОборот(Знач выборкаНоменклатураДокумента)
    движение = Движения.Продажи.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.Номенклатура = выборкаНоменклатураДокумента.Номенклатура;
    движение.Сотрудник = ЭтотОбъект.Сотрудник;
    движение.Клиент = ЭтотОбъект.Клиент;
    движение.Сумма = выборкаНоменклатураДокумента.СуммаВДокументе;
    движение.Количество = выборкаНоменклатураДокумента.КоличествоВДокументе;
КонецПроцедуры

Функция выполнитьДвижениеТоварыНаСкладахРасходПоПартиям(Знач выборкаНоменклатураДокумента, Знач выполнятьПроводкиПоРегиструБУ = Истина)
    общаяСтоимостьНоменклатуры = 0;
    несписанныйОстаток = выборкаНоменклатураДокумента.КоличествоВДокументе;
    выборкаНоменклатураДокументаПоСрокуГодности = выборкаНоменклатураДокумента.Выбрать();
    Пока выборкаНоменклатураДокументаПоСрокуГодности.Следующий() И несписанныйОстаток > 0 Цикл
        // Выполняем проводку по регистру ТоварыНаСкладах для партии товаров
        суммаСписанияПоПартии = выполнитьДвижениеТоварыНаСкладахРасход(
                выборкаНоменклатураДокументаПоСрокуГодности,
                несписанныйОстаток);
        общаяСтоимостьНоменклатуры = общаяСтоимостьНоменклатуры + суммаСписанияПоПартии;

        // Выполняем проводку по регистру бухгалтерии для партии товаров
        Если выполнятьПроводкиПоРегиструБУ Тогда
            выполнитьДвижениеБУХозрасчетныйСписаниеПартииТоваров(выборкаНоменклатураДокументаПоСрокуГодности.СчетБухгалтерскогоУчета,
                выборкаНоменклатураДокументаПоСрокуГодности.Номенклатура, суммаСписанияПоПартии);
        КонецЕсли;
    КонецЦикла;

    Возврат общаяСтоимостьНоменклатуры;
КонецФункции

Функция выполнитьДвижениеТоварыНаСкладахРасход(Знач выборкаНоменклатураДокументаДетальные, текущийОстаток = 0) // => Число
    доступноДляСписания = Мин(выборкаНоменклатураДокументаДетальные.КоличествоОстаток, текущийОстаток);

    движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
    движение.Период = ЭтотОбъект.Дата;
    движение.Номенклатура = выборкаНоменклатураДокументаДетальные.Номенклатура;
    движение.Склад = выборкаНоменклатураДокументаДетальные.Склад;
    движение.СрокГодности = выборкаНоменклатураДокументаДетальные.СрокГодности;
    движение.Количество = доступноДляСписания;
    Если доступноДляСписания = выборкаНоменклатураДокументаДетальные.КоличествоОстаток Тогда
        движение.Сумма = выборкаНоменклатураДокументаДетальные.СуммаОстаток;
    Иначе
        движение.Сумма = доступноДляСписания / выборкаНоменклатураДокументаДетальные.КоличествоОстаток
            * выборкаНоменклатураДокументаДетальные.СуммаОстаток;
    КонецЕсли;

    текущийОстаток = текущийОстаток - доступноДляСписания;

    Возврат движение.Сумма;
КонецФункции

Процедура выполнитьДвижениеУчетЗатратОборот(Знач выборкаНоменклатураДокумента, Знач стоимостьОбщая)
    движение = Движения.УчетЗатрат.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.СтатьяЗатрат = выборкаНоменклатураДокумента.СтатьяЗатрат;
    движение.Сумма = стоимостьОбщая;
КонецПроцедуры

Процедура выполнитьДвижениеЗаказыКлиентовРасход(Знач выборкаНоменклатураДокумента)
    движение = Движения.ЗаказыКлиентов.Добавить();
    движение.Номенклатура = выборкаНоменклатураДокумента.Номенклатура;
    движение.ВидДвижения = ВидДвиженияНакопления.Расход;
    движение.Период = ЭтотОбъект.Дата;
    движение.Клиент = ЭтотОбъект.Клиент;
    движение.ДатаЗаписи = НачалоМинуты(ДатаОказанияУслуги);
    движение.Количество = выборкаНоменклатураДокумента.КоличествоВДокументе;
    движение.Сумма = выборкаНоменклатураДокумента.СуммаВДокументе;
КонецПроцедуры

// Выполняет проверку достаточности остатков по Номенклатуре.\
// В случае отсутствия достаточного количества остатков - оповещает Пользователя.
//
// Параметры:
//	количествоВДокументе - Число - Количество Номенклатуры в документе для движения
//	остаток - Число - Остаток Номенклатуры на складах
//	наименованиеНоменклатуры - Строка - Наименование Номенклатуры, используется в тексте сообщения
//
// Возвращаемое значение:
//	Булево - Истина если остатков нехватает, иначе Ложь
//
Функция проверитьПревышениеОстатков(Знач количествоВДокументе, Знач остаток, Знач наименованиеНоменклатуры)
    превышениеОстатковНоменклатуры = количествоВДокументе - остаток;
    Если превышениеОстатковНоменклатуры > 0 Тогда
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = СтрШаблон("Превышение остатка по номенклатуре: ""%1"" в количестве: ""%2""",
                наименованиеНоменклатуры, превышениеОстатковНоменклатуры);
        сообщение.Сообщить();
        Возврат Истина;
    КонецЕсли;
    Возврат Ложь;
КонецФункции

// Выполняет контроль остатков в РегистрНакопления.ЗаказыКлиентов.\
//
// Параметры:
//	менеджерТаблиц - МенеджерВременныхТаблиц - должен содержать ранее заполненную
//	временную таблицу ВТ_Товары
//
// Возвращаемое значение:
//	Булево - Истина: если превышения остатков нет (Успех),
//	Ложь если обнаружены превышения остатков (Проверка не пройдена).
//
Функция выполнитьКонтрольОстатковДляЗаказыКлиентов(Знач менеджерТаблиц) // => Булево
    Движения.ЗаказыКлиентов.БлокироватьДляИзменения = Истина;
    Движения.ЗаказыКлиентов.Записать();

    выборкаПревышенияОстатков = получитьВыборкуПревышенияОстатковЗаказыКлиентов(менеджерТаблиц);

    Если выборкаПревышенияОстатков = Неопределено Тогда
        Возврат Истина; // Превышения остатков нет - Успех.
    КонецЕсли;

    Пока выборкаПревышенияОстатков.Следующий() Цикл
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст =
            СтрШаблон("Услуга: ""%1"" для клиента: ""%2"" на дату: ""%3"" уже была обработана или не была найдена такая запись!",
                выборкаПревышенияОстатков.НоменклатураПредставление, выборкаПревышенияОстатков.КлиентПредставление,
                Формат(выборкаПревышенияОстатков.ДатаЗаписи, "ДФ=dd.MM.yy"));
        Сообщение.Сообщить();
    КонецЦикла;

    Возврат Ложь; // Обнаружены превышения остатков - Проверка не пройдена
КонецФункции
#КонецОбласти // Движения

Функция получитьБлокировкуИзмененияТоварыНаСкладах() // => БлокировкаДанных
    блокировка = Новый БлокировкаДанных;
    элементБлокировки = блокировка.Добавить("РегистрНакопления.ТоварыНаСкладах");
    элементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
    элементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
    элементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
    элементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");

    Возврат блокировка;
КонецФункции

Функция получитьЭтоРеализацияНаОснованииЗаписиКлиента()
    Возврат ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаписьКлиента");
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
