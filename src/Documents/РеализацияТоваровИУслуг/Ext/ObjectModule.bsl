#Область ПрограммныйИнтерфейс

Процедура ОбновитьСтатусОплатыДокумента(Знач принудительно = Истина) Экспорт
    Если принудительно ИЛИ ПризнакОплаты <> Перечисления.ПризнакиОплаты.ПолностьюОплачен Тогда
        ПризнакОплаты = Документы.РеализацияТоваровИУслуг.ПроверитьСтатусОплаты(Ссылка,
                Новый Граница(ЭтотОбъект.МоментВремени())).ПризнакОплаты;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(отказ, __)
    очиститьДвиженияДокумента();
    результатВыполненияДвижений = выполнитьВсеДвиженияДокумента();
    Если НЕ результатВыполненияДвижений.Отказ Тогда
        записатьДвижения();
    Иначе
        отказ = Истина;
    КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(данныеЗаполнения, __)
    Если ТипЗнч(данныеЗаполнения) = Тип("ДокументСсылка.ЗаписьКлиента") Тогда
        ЭтотОбъект.ДатаОказанияУслуги = НачалоМинуты(данныеЗаполнения.ДатаЗаписи);
        ЭтотОбъект.Клиент = данныеЗаполнения.Клиент;
        ЭтотОбъект.Сотрудник = данныеЗаполнения.Сотрудник;
        ЭтотОбъект.ДокументОснование = данныеЗаполнения;

        Для Каждого текСтрокаУслуги Из данныеЗаполнения.Услуги Цикл
            новаяСтрока = Услуги.Добавить();
            новаяСтрока.Количество = текСтрокаУслуги.Количество;
            новаяСтрока.Номенклатура = текСтрокаУслуги.Номенклатура;
            новаяСтрока.Сумма = текСтрокаУслуги.Сумма;
            новаяСтрока.Цена = текСтрокаУслуги.Цена;
        КонецЦикла;

        ЭтотОбъект.СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
    КонецЕсли;

    РаботаСДокументами.ЗаполнитьПолеАвторДокументаНаСервере(ЭтотОбъект);
КонецПроцедуры

Процедура ПередЗаписью(_, __, ___)
    Если ОбменДанными.Загрузка Тогда
        Возврат;
    КонецЕсли;

    СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
    ДатаОказанияУслуги = ?(ЗначениеЗаполнено(ДатаОказанияУслуги), НачалоМинуты(ДатаОказанияУслуги), ДатаОказанияУслуги);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

#Область ЗапросыДанных
Функция получитьВыборкуДокументНоменклатураОстатки(Знач менеджерТаблиц)
    Возврат Документы.РеализацияТоваровИУслуг.ПолучитьВыборкуДокументНоменклатураОстатки(
        ЭтотОбъект.Ссылка,
        Новый Граница(ЭтотОбъект.МоментВремени()),
        менеджерТаблиц);
КонецФункции

Функция получитьВыборкуПревышенияОстатковЗаказыКлиентов(Знач менеджерТаблиц) // => Выборка | Неопределено
    Возврат Документы.РеализацияТоваровИУслуг.ПолучитьВыборкуПревышенияОстатковЗаказыКлиентов(
        ЭтотОбъект.ДатаОказанияУслуги,
        ЭтотОбъект.Клиент,
        Новый Граница(ЭтотОбъект.МоментВремени()),
        менеджерТаблиц);
КонецФункции
#КонецОбласти // ЗапросыДанных

#Область Движения
Процедура записатьДвижения()
    Движения.ТоварыНаСкладах.Записывать = Истина;
    Движения.Продажи.Записывать = Истина;
    Движения.УчетЗатрат.Записывать = Истина;
    Движения.Хозрасчетный.Записывать = Истина;
    Движения.УчетДебиторскойЗадолженности.Записывать = Истина;
    Движения.ЖурналЗаписейКлиентов.Записывать = Истина;

    // Для контроля остатков по новому способу
    // От этой строки можно избавиться, т.к. запись включается при контроле остатков
    Движения.ЗаказыКлиентов.Записывать = Истина;
    Движения.ЗаказыКлиентов.Записать();
КонецПроцедуры

Процедура очиститьДвиженияДокумента()
    Движения.ТоварыНаСкладах.Записывать = Истина;
    Движения.Продажи.Записывать = Истина;
    Движения.УчетЗатрат.Записывать = Истина;
    Движения.Хозрасчетный.Записывать = Истина;
    Движения.УчетДебиторскойЗадолженности.Записывать = Истина;
    Движения.ЖурналЗаписейКлиентов.Записывать = Истина;

    Движения.Записать();
КонецПроцедуры

Функция выполнитьВсеДвиженияДокумента()
    результатВыполнения = Новый Структура("Отказ", Ложь);
    менеджерТаблиц = Новый МенеджерВременныхТаблиц;

    блокировка = получитьБлокировкуИзмененияТоварыНаСкладах();
    блокировка.Заблокировать();

    этоРеализацияНаОснованииЗаписиКлиента = получитьЭтоРеализацияНаОснованииЗаписиКлиента();
    выборкаНоменклатураДокумента = получитьВыборкуДокументНоменклатураОстатки(менеджерТаблиц);
    Пока выборкаНоменклатураДокумента.Следующий() Цикл
        этоТовар = выборкаНоменклатураДокумента.ЭтоТовар;
        Если этоТовар Тогда
            Если проверитьПревышениеОстатков(
                    выборкаНоменклатураДокумента.КоличествоВДокументе,
                    выборкаНоменклатураДокумента.КоличествоОстаток,
                    выборкаНоменклатураДокумента.НоменклатураПредставление) Тогда
                результатВыполнения.Отказ = Истина;
            КонецЕсли;

            Если результатВыполнения.Отказ Тогда
                Продолжить;
            КонецЕсли;

            стоимостьОбщая = выполнитьДвижениеТоварыНаСкладахРасходПоПартиям(выборкаНоменклатураДокумента);
            выполнитьДвижениеУчетЗатратОборот(выборкаНоменклатураДокумента, стоимостьОбщая);
        Иначе // Это услуга
            Если этоРеализацияНаОснованииЗаписиКлиента Тогда
                выполнитьДвижениеЗаказыКлиентовРасход(выборкаНоменклатураДокумента);
            КонецЕсли;
        КонецЕсли;

        выполнитьДвижениеПродажиОборот(выборкаНоменклатураДокумента);
    КонецЦикла;

    Если этоРеализацияНаОснованииЗаписиКлиента И ЗначениеЗаполнено(ЭтотОбъект.Услуги) Тогда
        контрольЗаказовУспешно = выполнитьКонтрольОстатковДляЗаказыКлиентов(менеджерТаблиц);
        Если НЕ контрольЗаказовУспешно Тогда
            результатВыполнения.Отказ = Истина;
        Иначе
            выполнитьДвижениеЖурналЗаписейКлиентов();
        КонецЕсли;
    КонецЕсли;

    Если НЕ результатВыполнения.Отказ Тогда
        выполнитьДвижениеБУХозрасчетныйВыручкаОтПродаж();
        выполнитьДвижениеУчетДебиторскойЗадолженностиПриход();
    КонецЕсли;

    Возврат результатВыполнения;
КонецФункции

Процедура выполнитьДвижениеБУХозрасчетныйСписаниеПартииТоваров(Знач счетКт, Знач номенклатураСсылка, Знач суммаСписания)
    движение = Движения.Хозрасчетный.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.Сумма = суммаСписания;
    движение.СчетДт = ПланыСчетов.Хозрасчетный.Продажи;
    движение.СчетКт = счетКт;
    движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура] = номенклатураСсылка;
    движение.Содержание = "Списана себестоимость товарно-материальных ценностей";
КонецПроцедуры

Процедура выполнитьДвижениеБУХозрасчетныйВыручкаОтПродаж()
    движение = Движения.Хозрасчетный.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.Сумма = ЭтотОбъект.СуммаДокумента;
    движение.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
    движение.СчетКт = ПланыСчетов.Хозрасчетный.Продажи;
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетДт, движение.СубконтоДт, Клиент);
    движение.Содержание = "Отражена выручка от реализации товаров и услуг";
КонецПроцедуры

Процедура выполнитьДвижениеПродажиОборот(Знач выборкаНоменклатураДокумента)
    движение = Движения.Продажи.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.Номенклатура = выборкаНоменклатураДокумента.Номенклатура;
    движение.Сотрудник = ЭтотОбъект.Сотрудник;
    движение.Клиент = ЭтотОбъект.Клиент;
    движение.Сумма = выборкаНоменклатураДокумента.СуммаВДокументе;
    движение.Количество = выборкаНоменклатураДокумента.КоличествоВДокументе;
КонецПроцедуры

Функция выполнитьДвижениеТоварыНаСкладахРасходПоПартиям(Знач выборкаНоменклатураДокумента, Знач выполнятьПроводкиПоРегиструБУ = Истина)
    общаяСтоимостьНоменклатуры = 0;
    несписанныйОстаток = выборкаНоменклатураДокумента.КоличествоВДокументе;
    выборкаНоменклатураДокументаПоСрокуГодности = выборкаНоменклатураДокумента.Выбрать();
    Пока выборкаНоменклатураДокументаПоСрокуГодности.Следующий() И несписанныйОстаток > 0 Цикл
        // Выполняем проводку по регистру ТоварыНаСкладах для партии товаров
        суммаСписанияПоПартии = выполнитьДвижениеТоварыНаСкладахРасход(
                выборкаНоменклатураДокументаПоСрокуГодности,
                несписанныйОстаток);
        общаяСтоимостьНоменклатуры = общаяСтоимостьНоменклатуры + суммаСписанияПоПартии;

        // Выполняем проводку по регистру бухгалтерии для партии товаров
        Если выполнятьПроводкиПоРегиструБУ Тогда
            выполнитьДвижениеБУХозрасчетныйСписаниеПартииТоваров(выборкаНоменклатураДокументаПоСрокуГодности.СчетБухгалтерскогоУчета,
                выборкаНоменклатураДокументаПоСрокуГодности.Номенклатура, суммаСписанияПоПартии);
        КонецЕсли;
    КонецЦикла;

    Возврат общаяСтоимостьНоменклатуры;
КонецФункции

Функция выполнитьДвижениеТоварыНаСкладахРасход(Знач выборкаНоменклатураДокументаДетальные, текущийОстаток = 0) // => Число
    доступноДляСписания = Мин(выборкаНоменклатураДокументаДетальные.КоличествоОстаток, текущийОстаток);

    движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
    движение.Период = ЭтотОбъект.Дата;
    движение.Номенклатура = выборкаНоменклатураДокументаДетальные.Номенклатура;
    движение.Склад = выборкаНоменклатураДокументаДетальные.Склад;
    движение.СрокГодности = выборкаНоменклатураДокументаДетальные.СрокГодности;
    движение.Количество = доступноДляСписания;
    Если доступноДляСписания = выборкаНоменклатураДокументаДетальные.КоличествоОстаток Тогда
        движение.Сумма = выборкаНоменклатураДокументаДетальные.СуммаОстаток;
    Иначе
        движение.Сумма = доступноДляСписания / выборкаНоменклатураДокументаДетальные.КоличествоОстаток
            * выборкаНоменклатураДокументаДетальные.СуммаОстаток;
    КонецЕсли;

    текущийОстаток = текущийОстаток - доступноДляСписания;

    Возврат движение.Сумма;
КонецФункции

Процедура выполнитьДвижениеУчетЗатратОборот(Знач выборкаНоменклатураДокумента, Знач стоимостьОбщая)
    движение = Движения.УчетЗатрат.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.СтатьяЗатрат = выборкаНоменклатураДокумента.СтатьяЗатрат;
    движение.Сумма = стоимостьОбщая;
КонецПроцедуры

Процедура выполнитьДвижениеЗаказыКлиентовРасход(Знач выборкаНоменклатураДокумента)
    движение = Движения.ЗаказыКлиентов.Добавить();
    движение.Номенклатура = выборкаНоменклатураДокумента.Номенклатура;
    движение.ВидДвижения = ВидДвиженияНакопления.Расход;
    движение.Период = ЭтотОбъект.Дата;
    движение.Клиент = ЭтотОбъект.Клиент;
    движение.ДатаЗаписи = НачалоМинуты(ДатаОказанияУслуги);
    движение.Количество = выборкаНоменклатураДокумента.КоличествоВДокументе;
    движение.Сумма = выборкаНоменклатураДокумента.СуммаВДокументе;
КонецПроцедуры

Процедура выполнитьДвижениеУчетДебиторскойЗадолженностиПриход()
    движение = Движения.УчетДебиторскойЗадолженности.Добавить();
    движение.ВидДвижения = ВидДвиженияНакопления.Приход;
    движение.Период = ЭтотОбъект.Дата;
    движение.ДокументНаОплату = ЭтотОбъект.Ссылка;
    движение.Контрагент = ЭтотОбъект.Клиент;
    движение.Сумма = ЭтотОбъект.СуммаДокумента;
КонецПроцедуры

Процедура выполнитьДвижениеЖурналЗаписейКлиентов()
    движение = Движения.ЖурналЗаписейКлиентов.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.ЗаписьКлиента = ЭтотОбъект.ДокументОснование;
    записьКлиентаСтруктура = РаботаСРеквизитами.ЗначенияРеквизитовОбъекта(
            ЭтотОбъект.ДокументОснование, "Сотрудник, Клиент, ДатаЗаписи, ДатаОкончанияЗаписи");

    движение.Клиент = записьКлиентаСтруктура.Клиент;
    движение.Сотрудник = записьКлиентаСтруктура.Сотрудник;
    движение.ДатаЗаписи = записьКлиентаСтруктура.ДатаЗаписи;
    движение.ДатаОкончания = записьКлиентаСтруктура.ДатаОкончанияЗаписи;
    движение.Статус = Перечисления.СтатусЗаписиКлинта.Выполнена;
КонецПроцедуры

// Выполняет проверку достаточности остатков по Номенклатуре.\
// В случае отсутствия достаточного количества остатков - оповещает Пользователя.
//
// Параметры:
//	количествоВДокументе - Число - Количество Номенклатуры в документе для движения
//	остаток - Число - Остаток Номенклатуры на складах
//	наименованиеНоменклатуры - Строка - Наименование Номенклатуры, используется в тексте сообщения
//
// Возвращаемое значение:
//	Булево - Истина если остатков нехватает, иначе Ложь
//
Функция проверитьПревышениеОстатков(Знач количествоВДокументе, Знач остаток, Знач наименованиеНоменклатуры)
    превышениеОстатковНоменклатуры = количествоВДокументе - остаток;
    Если превышениеОстатковНоменклатуры > 0 Тогда
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = СтрШаблон("Превышение остатка по номенклатуре: ""%1"" в количестве: ""%2""",
                наименованиеНоменклатуры, превышениеОстатковНоменклатуры);
        сообщение.Сообщить();
        Возврат Истина;
    КонецЕсли;
    Возврат Ложь;
КонецФункции

// Выполняет контроль остатков в РегистрНакопления.ЗаказыКлиентов.\
//
// Параметры:
//	менеджерТаблиц - МенеджерВременныхТаблиц - должен содержать ранее заполненную
//	временную таблицу ВТ_Товары
//
// Возвращаемое значение:
//	Булево - Истина: если превышения остатков нет (Успех),
//	Ложь если обнаружены превышения остатков (Проверка не пройдена).
//
Функция выполнитьКонтрольОстатковДляЗаказыКлиентов(Знач менеджерТаблиц) // => Булево
    Движения.ЗаказыКлиентов.БлокироватьДляИзменения = Истина;
    Движения.ЗаказыКлиентов.Записать();

    выборкаПревышенияОстатков = получитьВыборкуПревышенияОстатковЗаказыКлиентов(менеджерТаблиц);

    Если выборкаПревышенияОстатков = Неопределено Тогда
        Возврат Истина; // Превышения остатков нет - Успех.
    КонецЕсли;

    Пока выборкаПревышенияОстатков.Следующий() Цикл
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст =
            СтрШаблон("Услуга: ""%1"" для клиента: ""%2"" на дату: ""%3"" уже была обработана или не была найдена такая запись!",
                выборкаПревышенияОстатков.НоменклатураПредставление, выборкаПревышенияОстатков.КлиентПредставление,
                Формат(выборкаПревышенияОстатков.ДатаЗаписи, "ДФ=dd.MM.yy"));
        Сообщение.Сообщить();
    КонецЦикла;

    Возврат Ложь; // Обнаружены превышения остатков - Проверка не пройдена
КонецФункции
#КонецОбласти // Движения

Функция получитьБлокировкуИзмененияТоварыНаСкладах() // => БлокировкаДанных
    блокировка = Новый БлокировкаДанных;
    элементБлокировки = блокировка.Добавить("РегистрНакопления.ТоварыНаСкладах");
    элементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
    элементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
    элементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
    элементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");

    Возврат блокировка;
КонецФункции

Функция получитьЭтоРеализацияНаОснованииЗаписиКлиента()
    Возврат ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаписьКлиента");
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
