#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(данныеЗаполнения, __, ___)
    заполнитьДокументНаОсновании(данныеЗаполнения);
    РаботаСДокументами.ЗаполнитьПолеАвторДокументаНаСервере(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаПроведения(_, __)
    очиститьДвижения();

    Если ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные Тогда
        Движения.ДенежныеСредства.Записывать = Истина;
        выполнитьДвижениеДенежныеСредстваПриход();

    ИначеЕсли ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
        Движения.БезналичнаяОплата.Записывать = Истина;
        выполнитьДвижениеБезналичнаяОплатаОборот();

    КонецЕсли;

    выполнитьДвижениеБУХозрасчетный();

    // Обновление статуса оплаты ДокументаРТУ
    Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровИУслуг") Тогда
        документРТУОбъект = ДокументОснование.ПолучитьОбъект();
        Если НЕ документРТУОбъект.Заблокирован() Тогда
            документРТУОбъект.Заблокировать();
            документРТУОбъект.ОбновитьСтатусОплатыДокумента();
            документРТУОбъект.Записать();
            документРТУОбъект.Разблокировать();
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

#Область Движения
Процедура очиститьДвижения()
    Движения.ДенежныеСредства.Записывать = Истина;
    Движения.БезналичнаяОплата.Записывать = Истина;

    Движения.Записать();
КонецПроцедуры

Процедура выполнитьДвижениеДенежныеСредстваПриход()
    движение = Движения.ДенежныеСредства.Добавить();
    движение.ВидДвижения = ВидДвиженияНакопления.Приход;
    движение.Период = Дата;
    движение.БанковскийСчетКасса = Касса;
    движение.ТипДенежныхСредств = ТипДенежныхСредств;
    движение.Сумма = СуммаДокумента;
КонецПроцедуры

Процедура выполнитьДвижениеБезналичнаяОплатаОборот()
    движение = Движения.БезналичнаяОплата.Добавить();
    движение.Период = Дата;
    движение.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
    движение.Сумма = СуммаДокумента;
КонецПроцедуры

Процедура выполнитьДвижениеБУХозрасчетный()
    аналитикаПроводки = ПолучитьАналитикуПроводки();

    Движения.Хозрасчетный.Записывать = Истина;
    движение = Движения.Хозрасчетный.Добавить();

    движение.СчетДт = аналитикаПроводки.СчетДебета;
    движение.СчетКт = аналитикаПроводки.СчетКредита;
    движение.Период = Дата;
    движение.Сумма = СуммаДокумента;
    движение.Содержание = аналитикаПроводки.СодержаниеОперации;
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетДт, движение.СубконтоДт, аналитикаПроводки.СубконтоДебет);
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетКт, движение.СубконтоКт, аналитикаПроводки.СубконтоКредит);
КонецПроцедуры
#КонецОбласти // Движения

// Параметры:
//  данныеЗаполнения - ДокументСсылка.РеализацияТоваровИУслуг
//
// Возвращаемое значение:
//  - Булево - Истина если значения заполнены иначе - Ложь
Функция заполнитьДокументНаОсновании(Знач данныеЗаполнения)
    Если данныеЗаполнения = Неопределено Тогда
        Возврат Ложь;
    КонецЕсли;

    типДокументаОСнования = ТипЗнч(данныеЗаполнения);
    Если типДокументаОСнования = Тип("ДокументСсылка.РеализацияТоваровИУслуг") Тогда
        данныеЗаполнения = РаботаСРеквизитами.ЗначенияРеквизитовОбъекта(данныеЗаполнения.Ссылка, "Клиент, СуммаДокумента");

        ДиагностикаКлиентСервер.Утверждение(ЗначениеЗаполнено(данныеЗаполнения.Клиент),
            СтрШаблон("Поле ""%1"" Документа основания ""%2"" должно быть заполнено", "Клиент",
                Строка(Тип("ДокументСсылка.РеализацияТоваровИУслуг"))),
            "ПоступлениеДенежныхСредств.МодульОбъекта.заполнитьДокументНаОсновании");

        ДокументОснование = данныеЗаполнения.Ссылка;
        ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступленияДенег.ОплатаОтПокупателя;
        Плательщик = данныеЗаполнения.Клиент;
        СуммаДокумента = данныеЗаполнения.СуммаДокумента;

        кассаПоУмолчанию = Документы.ПоступлениеДенежныхСредств.ПолучитьКассуПоУмолчанию();
        Касса = ?(ЗначениеЗаполнено(кассаПоУмолчанию), кассаПоУмолчанию, Касса);

        Возврат Истина;
    КонецЕсли;

    Возврат Ложь;
КонецФункции

Функция ПолучитьАналитикуПроводки()
    значенияПолей = Новый Структура;
    значенияПолей.Вставить("Плательщик", Плательщик);
    значенияПолей.Вставить("Касса", Касса);
    значенияПолей.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
    значенияПолей.Вставить("РасчетныйСчет", РасчетныйСчет);

    Возврат Документы.ПоступлениеДенежныхСредств.ПолучитьАналитикуПроводки(ВидОперации, типДенежныхСредств, значенияПолей);
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
