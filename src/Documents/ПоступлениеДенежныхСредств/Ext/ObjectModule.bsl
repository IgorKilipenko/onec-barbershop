#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(данныеЗаполнения, __, ___)
    заполнитьДокументНаОсновании(данныеЗаполнения);
    РаботаСДокументами.ЗаполнитьПолеАвторДокументаНаСервере(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаПроведения(отказ, __)
    результатВыполненияДвижений = выполнитьВсеДвижения();
    Если результатВыполненияДвижений.Отказ Тогда
        отказ = Истина;
    КонецЕсли;

    Если НЕ отказ Тогда
        обновитьСтатусОплатыДокументаРТУ();
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

Функция обновитьСтатусОплатыДокументаРТУ()
    Если получитьЭтоДокументНаОснованииРеализацииТиУ() Тогда
        документРТУОбъект = ДокументОснование.ПолучитьОбъект();
        Если НЕ документРТУОбъект.Заблокирован() Тогда
            документРТУОбъект.ОбновитьСтатусОплатыДокумента();
            документРТУОбъект.Записать();

            Возврат Истина;
        КонецЕсли;
    КонецЕсли;

    Возврат Ложь;
КонецФункции

#Область Движения
Функция выполнитьВсеДвижения()
    результат = Новый Структура("Отказ", Ложь);

    // Очистка УчетДебиторскойЗадолженности
    Движения.УчетДебиторскойЗадолженности.Записывать = Истина;
    Движения.УчетДебиторскойЗадолженности.Записать();

    Движения.ДенежныеСредства.Записывать = Истина;
    Движения.БезналичнаяОплата.Записывать = Истина;
    Движения.УчетДебиторскойЗадолженности.Записывать = Истина;

    Если получитьЭтоДокументНаОснованииРеализацииТиУ() Тогда
        выполнитьДвижениеУчетДебиторскойЗадолженностиРасход();
        результатКонтроляДвижения = выполнитьКонтрольОстатковЗадолженности();
        Если результатКонтроляДвижения.Отказ Тогда
            результат.Отказ = Истина;
        КонецЕсли;
    КонецЕсли;

    Если НЕ результат.Отказ Тогда
        Если ЭтотОбъект.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные Тогда
            выполнитьДвижениеДенежныеСредстваПриход();
        ИначеЕсли ЭтотОбъект.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
            выполнитьДвижениеБезналичнаяОплатаОборот();
        КонецЕсли;

        выполнитьДвижениеБУХозрасчетный();
    КонецЕсли;

    Возврат результат;
КонецФункции

Процедура выполнитьДвижениеДенежныеСредстваПриход()
    движение = Движения.ДенежныеСредства.Добавить();
    движение.ВидДвижения = ВидДвиженияНакопления.Приход;
    движение.Период = ЭтотОбъект.Дата;
    движение.БанковскийСчетКасса = ЭтотОбъект.Касса;
    движение.ТипДенежныхСредств = ЭтотОбъект.ТипДенежныхСредств;
    движение.Сумма = ЭтотОбъект.СуммаДокумента;
КонецПроцедуры

Процедура выполнитьДвижениеБезналичнаяОплатаОборот()
    движение = Движения.БезналичнаяОплата.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.ЭквайринговыйТерминал = ЭтотОбъект.ЭквайринговыйТерминал;
    движение.Сумма = ЭтотОбъект.СуммаДокумента;
КонецПроцедуры

Процедура выполнитьДвижениеУчетДебиторскойЗадолженностиРасход()
    ДиагностикаКлиентСервер.Утверждение(получитьЭтоДокументНаОснованииРеализацииТиУ(),
        СтрШаблон("Документ основание должен иметь тип значения ""%1"".",
            Строка(Тип("ДокументСсылка.РеализацияТоваровИУслуг"))));

    движение = Движения.УчетДебиторскойЗадолженности.Добавить();
    движение.ВидДвижения = ВидДвиженияНакопления.Расход;
    движение.Период = ЭтотОбъект.Дата;
    движение.ДокументНаОплату = ЭтотОбъект.ДокументОснование;

    документаРТУ = РаботаСРеквизитами.ЗначенияРеквизитовОбъекта(ЭтотОбъект.ДокументОснование, "Клиент");
    ДиагностикаКлиентСервер.Утверждение(документаРТУ.Клиент = ЭтотОбъект.Плательщик,
            "Контрагенты для документов реализации и платежей должны совпадать.");

    движение.Контрагент = документаРТУ.Клиент;
    движение.Сумма = ЭтотОбъект.СуммаДокумента;
КонецПроцедуры

Процедура выполнитьДвижениеБУХозрасчетный()
    аналитикаПроводки = ПолучитьАналитикуПроводки();

    Движения.Хозрасчетный.Записывать = Истина;
    движение = Движения.Хозрасчетный.Добавить();

    движение.СчетДт = аналитикаПроводки.СчетДебета;
    движение.СчетКт = аналитикаПроводки.СчетКредита;
    движение.Период = ЭтотОбъект.Дата;
    движение.Сумма = ЭтотОбъект.СуммаДокумента;
    движение.Содержание = аналитикаПроводки.СодержаниеОперации;
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетДт, движение.СубконтоДт, аналитикаПроводки.СубконтоДебет);
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетКт, движение.СубконтоКт, аналитикаПроводки.СубконтоКредит);
КонецПроцедуры

Функция выполнитьКонтрольОстатковЗадолженности()
    результат = Новый Структура("Отказ", Ложь);

    // Запись движений для последующего контроля
    Движения.УчетДебиторскойЗадолженности.БлокироватьДляИзменения = Истина;
    Движения.УчетДебиторскойЗадолженности.Записать();

    ДиагностикаКлиентСервер.Утверждение(получитьЭтоДокументНаОснованииРеализацииТиУ(),
        СтрШаблон("Документ должен быть создан на основании ""%1"".", Строка(Тип("ДокументСсылка.РеализацияТоваровИУслуг"))));

    статусОплаты_ = Документы.РеализацияТоваровИУслуг.ПроверитьСтатусОплаты(ЭтотОбъект.ДокументОснование, Неопределено);
    Если статусОплаты_.ОсталосьОплатить < 0 Тогда
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = СтрШаблон(
                "Сумма документа превышает остаток задолженности по оплате на ""%1 руб."".
                |Неоплаченный остаток по документу ""%2"" составляет: ""%3 руб.""",
                -статусОплаты_.ОсталосьОплатить,
                статусОплаты_.Представление,
                ЭтотОбъект.СуммаДокумента + статусОплаты_.ОсталосьОплатить);
        сообщение.Сообщить();

        результат.Отказ = Истина;
        Возврат результат;
    КонецЕсли;

    Возврат результат;
КонецФункции
#КонецОбласти // Движения

// Параметры:
//  данныеЗаполнения - ДокументСсылка
//
// Возвращаемое значение:
//  - Булево - Истина если значения заполнены иначе - Ложь
Функция заполнитьДокументНаОсновании(Знач данныеЗаполнения)
    данныеЗаполненияОснования = получитьДанныеЗаполненияНаОсновании(данныеЗаполнения);
    Если данныеЗаполненияОснования = Неопределено Тогда
        Возврат Ложь;
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(ЭтотОбъект, данныеЗаполненияОснования);
    ЭтотОбъект.ДокументОснование = данныеЗаполнения;

    Возврат Истина;
КонецФункции

// Параметры:
//  данныеЗаполнения - ДокументСсылка
//
// Возвращаемое значение:
//  - Структура, Неопределено
Функция получитьДанныеЗаполненияНаОсновании(Знач данныеЗаполнения)
    результат = Неопределено;
    Если данныеЗаполнения = Неопределено ИЛИ НЕ ЗначениеЗаполнено(данныеЗаполнения) Тогда
        Возврат результат;
    КонецЕсли;

    типДокументаОСнования = ТипЗнч(данныеЗаполнения);
    Если типДокументаОСнования = Тип("ДокументСсылка.РеализацияТоваровИУслуг") Тогда
        данныеЗаполнения = РаботаСРеквизитами.ЗначенияРеквизитовОбъекта(данныеЗаполнения.Ссылка, "Клиент, СуммаДокумента");

        ДиагностикаКлиентСервер.Утверждение(ЗначениеЗаполнено(данныеЗаполнения.Клиент),
            СтрШаблон("Поле ""%1"" Документа основания ""%2"" должно быть заполнено", "Клиент",
                Строка(Тип("ДокументСсылка.РеализацияТоваровИУслуг"))),
            "ПоступлениеДенежныхСредств.МодульОбъекта.заполнитьДокументНаОсновании");

        результат = Новый Структура;
        результат.Вставить("ВидОперации", Перечисления.ВидыОперацийПоступленияДенег.ОплатаОтПокупателя);
        результат.Вставить("Плательщик", данныеЗаполнения.Клиент);
        результат.Вставить("СуммаДокумента", данныеЗаполнения.СуммаДокумента);

        кассаПоУмолчанию = Документы.ПоступлениеДенежныхСредств.ПолучитьКассуПоУмолчанию();
        результат.Вставить("Касса", ?(ЗначениеЗаполнено(кассаПоУмолчанию), кассаПоУмолчанию, ЭтотОбъект.Касса));
    КонецЕсли;

    Возврат результат;
КонецФункции

Функция ПолучитьАналитикуПроводки()
    значенияПолей = Новый Структура;
    значенияПолей.Вставить("Плательщик", ЭтотОбъект.Плательщик);
    значенияПолей.Вставить("Касса", ЭтотОбъект.Касса);
    значенияПолей.Вставить("ЭквайринговыйТерминал", ЭтотОбъект.ЭквайринговыйТерминал);
    значенияПолей.Вставить("РасчетныйСчет", ЭтотОбъект.РасчетныйСчет);

    Возврат Документы.ПоступлениеДенежныхСредств.ПолучитьАналитикуПроводки(
        ЭтотОбъект.ВидОперации, ЭтотОбъект.ТипДенежныхСредств, значенияПолей);
КонецФункции

Функция получитьЭтоДокументНаОснованииРеализацииТиУ()
    Возврат ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование)
    И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровИУслуг");
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
