#Область ОписаниеПеременных

&НаКлиенте
Перем _ТипыДенежныхСредств;

&НаКлиенте
Перем _ВидыОперацийПоступленияДенег;

&НаКлиенте
Перем _ПоляИзменяющиеТипФормы;

&НаКлиенте
Перем _ТипДенежныхСредствБуфер;

&НаКлиенте
Перем _ВидОперацииБуфер;

&НаКлиенте
Перем _ПлательщикБуфер;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(_, __)
	инициализацияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(_)
	инициализация();
	установитьВидимостьПолейФормы();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипДенежныхСредствПриИзменении(_)
	изменитьТипФормы(_ПоляИзменяющиеТипФормы.ТипДенежныхСредств);
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(_)
	изменитьТипФормы(_ПоляИзменяющиеТипФормы.ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикПриИзменении(_)
	изменитьТипФормы(_ПоляИзменяющиеТипФормы.Плательщик);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура установитьВидимостьПолейФормы()

	Если Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные") Тогда
		Элементы.Касса.Видимость = Истина; //! Необходимо включить проверку заполнения
		Элементы.ЭквайринговыйТерминал.Видимость = Ложь;
	ИначеЕсли Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
		Элементы.Касса.Видимость = Ложь;
		Элементы.ЭквайринговыйТерминал.Видимость = Истина; //! Необходимо включить проверку заполнения
	КонецЕсли;

	строкаТипПлательщика = получитьПредставлениеТипаПлательщика();

	Если строкаТипПлательщика = Неопределено Тогда
		Элементы.Плательщик.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.Касса.Видимость = Истина; //! Необходимо включить проверку заполнения
		Элементы.ЭквайринговыйТерминал.Видимость = Ложь;
	Иначе
		этотПлательщикКонтрагент = НЕ (строкаТипПлательщика = "СправочникСсылка.Сотрудники" ИЛИ строкаТипПлательщика = "СправочникСсылка.Банки");
		Если этотПлательщикКонтрагент Тогда
			Элементы.ДоговорКонтрагента.Видимость = Истина;
			Элементы.Плательщик.Видимость = Истина;
		Иначе
			Элементы.ДоговорКонтрагента.Видимость = Ложь;
			Элементы.Плательщик.Видимость = Истина; //! Необходимо включить проверку заполнения
			Элементы.Касса.Видимость = Истина; //! Необходимо включить проверку заполнения
			Элементы.ЭквайринговыйТерминал.Видимость = Ложь;
		КонецЕсли;

		списокДоступныхДляВыбораТипов = Новый Массив();
		списокДоступныхДляВыбораТипов.Добавить(Тип(строкаТипПлательщика));
		описаниеТипаПлательщика = Новый ОписаниеТипов(списокДоступныхДляВыбораТипов);
		Элементы.Плательщик.ОграничениеТипа = описаниеТипаПлательщика;
	КонецЕсли;

	Если Элементы.ДоговорКонтрагента.Видимость = Истина
		И ЗначениеЗаполнено(Объект.Плательщик) Тогда
		Элементы.ДоговорКонтрагента.Видимость = НЕ этоКлиент(Объект.Плательщик);
	КонецЕсли;

КонецПроцедуры

// Возвращаемое значение:
//	- Строка
//	- Неопределено
&НаКлиенте
Функция получитьПредставлениеТипаПлательщика() // => Строка | Неопределено
	строкаТипПлательщика = Неопределено;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступленияДенег.ПрочееПоступление") Тогда
		Возврат строкаТипПлательщика;
	КонецЕсли;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступленияДенег.ВозвратОтПодотчетника") Тогда
		строкаТипПлательщика = "СправочникСсылка.Сотрудники";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступленияДенег.ПолучениеНаличныхВБанке") Тогда
		строкаТипПлательщика = "СправочникСсылка.Банки";
	Иначе
		строкаТипПлательщика = "СправочникСсылка.Контрагенты";
	КонецЕсли;

	Возврат строкаТипПлательщика;
КонецФункции

&НаКлиенте
Процедура изменитьТипФормы(Знач имяИзмененногоРеквизита)
	Если имяИзмененногоРеквизита = "ТипДенежныхСредств" Тогда
		изменитьТипДенежныхСредствФормы();
	ИначеЕсли имяИзмененногоРеквизита = "ВидОперации" Тогда
		показатьЗапросПользователюНаОчисткуПолейФормы_ПриИзмененииВидаОперации("_приЗапросеНаИзменениеВидаОперации_ОВ");
	ИначеЕсли имяИзмененногоРеквизита = "Плательщик" Тогда
		показатьЗапросПользователюНаОчисткуПолейФормы_ПриИзмененииПлательщика("_приЗапросеНаИзменениеПлательщика_ОВ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция сформироватьТекстЗапросаОчисткиПолей(Знач имяРеквизита, поляДляОчистки) // => Строка | Неопределено
	Если поляДляОчистки = Неопределено ИЛИ поляДляОчистки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	текстВопроса_ = СтрШаблон("При изменении реквизита ""%1"" будут очищены следующие данные:", имяРеквизита);

	Для Каждого поле Из поляДляОчистки Цикл
		текстВопроса_ = текстВопроса_ + "
			| - %1";

		текстВопроса_ = СтрШаблон(текстВопроса_, поле);
	КонецЦикла;

	Если ЗначениеЗаполнено(поляДляОчистки) Тогда
		текстВопроса_ = текстВопроса_ + "
			| Продолжить?";
	Иначе
		текстВопроса_ = Неопределено;
	КонецЕсли;

	Возврат текстВопроса_;
КонецФункции

// Открывает форму диалогового окна для подтверждения очистки ранее заполненных значений полей формы.\
// Вызывается при изменении значения поля формы: ТипаДенежныхСредств
//
// Параметры:
//	обратныйВызов - Строка - имя функции обратного вызова для обработки события: закрытие диалогового окна
//		по умолчанию - _приЗапросеНаИзменениеТипаДенежныхСредств_ОВ
&НаКлиенте
Асинх Процедура изменитьТипДенежныхСредствФормы()
	имяРеквизита = _ПоляИзменяющиеТипФормы.ТипДенежныхСредств;
	поляДляОчистки = Новый Массив;

	Если этоОплатаНаличными() И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		поляДляОчистки.Добавить("ЭквайринговыйТерминал");
	ИначеЕсли этоОплатаБезналичными() И ЗначениеЗаполнено(Объект.Касса) Тогда
		поляДляОчистки.Добавить("Касса");
	КонецЕсли;

	текстВопроса = сформироватьТекстЗапросаОчисткиПолей(имяРеквизита, поляДляОчистки);
	нужноОчиститьПоля = ЗначениеЗаполнено(текстВопроса);
	отменитьИзменение = Ложь;

	Если нужноОчиститьПоля Тогда
		кодВозврата = Ждать ВопросАсинх(текстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");
		отменитьИзменение = кодВозврата <> КодВозвратаДиалога.Да;

		Если НЕ отменитьИзменение Тогда
			очиститьНеиспользуемыеРеквизитыФормы(поляДляОчистки);
		КонецЕсли;
	КонецЕсли;

	Если нужноОчиститьПоля И отменитьИзменение Тогда // Возврат значений полей (отмена очистки)
		Объект.ТипДенежныхСредств = _ТипДенежныхСредствБуфер;

	Иначе // Применить изменения
		_ТипДенежныхСредствБуфер = Объект.ТипДенежныхСредств;
		установитьВидимостьПолейФормы();
	КонецЕсли;

КонецПроцедуры

// Открывает форму диалогового окна для подтверждения очистки ранее заполненных значений полей формы.\
// Вызывается при изменении значения поля формы: ВидаОперации
//
// Параметры:
//	обратныйВызов - Строка - имя функции обратного вызова для обработки события: закрытие диалогового окна
&НаКлиенте
Процедура показатьЗапросПользователюНаОчисткуПолейФормы_ПриИзмененииВидаОперации(обратныйВызов = "_приЗапросеНаИзменениеВидаОперации_ОВ")
	имяРеквизита = "ВидОперации";
	массивОчищаемыхРеквизитов = Новый Массив;

	одноИзОчищаемыхПолейЗаполнено = ЗначениеЗаполнено(Объект.Плательщик) ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента);

	Если одноИзОчищаемыхПолейЗаполнено Тогда
		Если (этоВозвратОтПодотчетника() ИЛИ этоПолучениеНаличныхВБанке()) И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			массивОчищаемыхРеквизитов.Добавить("ДоговорКонтрагента");

		ИначеЕсли этоПрочееПоступление() Тогда
			Если ЗначениеЗаполнено(Объект.Плательщик) Тогда
				массивОчищаемыхРеквизитов.Добавить("Плательщик");
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				массивОчищаемыхРеквизитов.Добавить("ДоговорКонтрагента");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	текстВопроса = сформироватьТекстЗапросаОчисткиПолей(имяРеквизита, массивОчищаемыхРеквизитов);

	Если текстВопроса <> Неопределено Тогда
		оповещение = Новый ОписаниеОповещения(обратныйВызов, ЭтотОбъект, массивОчищаемыхРеквизитов);
		ПоказатьВопрос(оповещение, текстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");
	Иначе
		// Поля для очистки не заполнены или ВидОперации не входит в диапазон значений
		_ВидОперацииБуфер = Объект.ВидОперации;
		установитьВидимостьПолейФормы();
		Возврат; // Оповещение пользователю не показываем
	КонецЕсли;
КонецПроцедуры

// Открывает форму диалогового окна для подтверждения очистки ранее заполненных значений полей формы.\
// Вызывается при изменении значения поля формы: Плательщик
//
// Параметры:
//	обратныйВызов - Строка - имя функции обратного вызова для обработки события: закрытие диалогового окна
&НаКлиенте
Процедура показатьЗапросПользователюНаОчисткуПолейФормы_ПриИзмененииПлательщика(обратныйВызов = "_приЗапросеНаИзменениеПлательщика_ОВ")
	имяРеквизита = "Плательщик";
	массивОчищаемыхРеквизитов = Новый Массив;

	этоКлиент = этоКлиент(Объект.Плательщик);
	массивОчищаемыхРеквизитов = Новый Массив;

	Если этоКлиент И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		массивОчищаемыхРеквизитов.Добавить("ДоговорКонтрагента");
	КонецЕсли;

	текстВопроса = сформироватьТекстЗапросаОчисткиПолей(имяРеквизита, массивОчищаемыхРеквизитов);

	Если текстВопроса <> Неопределено Тогда
		оповещение = Новый ОписаниеОповещения(обратныйВызов, ЭтотОбъект, массивОчищаемыхРеквизитов);
		ПоказатьВопрос(оповещение, текстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");
	Иначе
		_ПлательщикБуфер = Объект.Плательщик;
		установитьВидимостьПолейФормы();
	КонецЕсли;
КонецПроцедуры

// Выполняет очистку ранее заполненных значений полей формы
//
// Параметры:
//	поляДляОчистки - Массив - Массив имен полей (реквизитов) для очистки
&НаКлиенте
Процедура очиститьНеиспользуемыеРеквизитыФормы(поляДляОчистки)
	Для Каждого имяРеквизита Из поляДляОчистки Цикл
		Объект[имяРеквизита] = Неопределено;
	КонецЦикла;
	установитьВидимостьПолейФормы();
КонецПроцедуры

#Область СлужебныеПоля
// Параметры:
//	плательщикСсылка - СправочникСсылка.Контрагенты
//
// Возвращаемое значение:
//	- Булево
&НаСервереБезКонтекста
Функция этоКлиент(Знач плательщикСсылка) // => Булево

	Если ТипЗнч(плательщикСсылка) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Ложь;
	КонецЕсли;

	запросКонтрагента = Новый Запрос;
	запросКонтрагента.УстановитьПараметр("ПлательщикСсылка", плательщикСсылка);

	запросКонтрагента.Текст =
		"ВЫБРАТЬ
		|	Контрагенты.ТипКонтрагента КАК ТипКонтрагента,
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &ПлательщикСсылка
		|";

	выборка = запросКонтрагента.Выполнить().Выбрать();
	выборка.Следующий();

	Если ЗначениеЗаполнено(выборка.ТипКонтрагента)
		И выборка.ТипКонтрагента = Перечисления.ТипыКонтрагентов.Клиент Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция этоОплатаНаличными() // => Булево
	Возврат Объект.ТипДенежныхСредств = _ТипыДенежныхСредств.Наличные;
КонецФункции

&НаКлиенте
Функция этоОплатаБезналичными() // => Булево
	Возврат Объект.ТипДенежныхСредств = _ТипыДенежныхСредств.Безналичные;
КонецФункции

&НаКлиенте
Функция этоПрочееПоступление() // => Булево
	Возврат Объект.ВидОперации = _ВидыОперацийПоступленияДенег.ПрочееПоступление;
КонецФункции

&НаКлиенте
Функция этоВозвратОтПодотчетника() // => Булево
	Возврат Объект.ВидОперации = _ВидыОперацийПоступленияДенег.ВозвратОтПодотчетника;
КонецФункции

&НаКлиенте
Функция этоПолучениеНаличныхВБанке() // => Булево
	Возврат Объект.ВидОперации = _ВидыОперацийПоступленияДенег.ПолучениеНаличныхВБанке;
КонецФункции
#КонецОбласти // СлужебныеПоля

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийДиалоговФормы
// Функция обратного вызова.\
// Вызывается после закрытия диалогового окна с запросом подтверждения очистки неиспользуемых полей
// при изменении значения поля формы: ВидОперации
//
// Параметры:
//	кодВозврата - КодВозвратаДиалога
//	поляДляОчистки - Массив - Массив имен полей которые должны быть очищены
&НаКлиенте
Процедура _приЗапросеНаИзменениеВидаОперации_ОВ(Знач кодВозврата, поляДляОчистки) Экспорт
	Если кодВозврата = КодВозвратаДиалога.Да Тогда
		очиститьНеиспользуемыеРеквизитыФормы(поляДляОчистки);
		_ВидОперацииБуфер = Объект.ВидОперации;
	Иначе
		Объект.ВидОперации = _ВидОперацииБуфер;
	КонецЕсли;
КонецПроцедуры

// Функция обратного вызова.\
// Вызывается после закрытия диалогового окна с запросом подтверждения очистки неиспользуемых полей
// при изменении значения поля формы: ВидОперации
//
// Параметры:
//	кодВозврата - КодВозвратаДиалога
//	поляДляОчистки - Массив - Массив имен полей которые должны быть очищены
&НаКлиенте
Процедура _приЗапросеНаИзменениеПлательщика_ОВ(Знач кодВозврата, поляДляОчистки) Экспорт
	Если кодВозврата = КодВозвратаДиалога.Да Тогда
		очиститьНеиспользуемыеРеквизитыФормы(поляДляОчистки);
		_ПлательщикБуфер = Объект.Плательщик;
	Иначе
		Объект.Плательщик = _ПлательщикБуфер;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти // ФункцииОбратногоВызова

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область Инициализация
&НаКлиенте
Процедура инициализация()
	значенияПеречислений = получитьЗначенияПеречислений();
	_ТипыДенежныхСредств = значенияПеречислений.ТипыДенежныхСредств;
	_ВидыОперацийПоступленияДенег = значенияПеречислений.ВидыОперацийПоступленияДенег;

	_ПоляИзменяющиеТипФормы = Новый Структура;
	_ПоляИзменяющиеТипФормы.Вставить("ТипДенежныхСредств", "ТипДенежныхСредств");
	_ПоляИзменяющиеТипФормы.Вставить("ВидОперации", "ВидОперации");
	_ПоляИзменяющиеТипФормы.Вставить("Плательщик", "Плательщик");

	_ПлательщикБуфер = Объект.Плательщик;
	_ТипДенежныхСредствБуфер = Объект.ТипДенежныхСредств;
	_ВидОперацииБуфер = Объект.ВидОперации;
КонецПроцедуры

&НаСервере
Процедура инициализацияНаСервере()
	_ТипыДенежныхСредств = Документы.ПоступлениеДенежныхСредств.ПолучитьТипыДенежныхСредств();
	_ВидыОперацийПоступленияДенег = Документы.ПоступлениеДенежныхСредств.ПолучитьПолучитьВидыОперацийПоступленияДенег();
	Если Объект.Ссылка.Пустая() Тогда
		заполнитьПоляФормыЗначениямиПоУмолчаниюНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура заполнитьПоляФормыЗначениямиПоУмолчаниюНаСервере()
	Объект.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные;
	Объект.ВидОперации = Перечисления.ВидыОперацийПоступленияДенег.ОплатаОтПокупателя;
КонецПроцедуры

// Возвращаемое значение:
//	- Структура
&НаСервереБезКонтекста
Функция получитьЗначенияПеречислений()
	результат = Новый Структура;
	результат.Вставить("ТипыДенежныхСредств", Документы.ПоступлениеДенежныхСредств.ПолучитьТипыДенежныхСредств());
	результат.Вставить("ВидыОперацийПоступленияДенег", Документы.ПоступлениеДенежныхСредств.ПолучитьПолучитьВидыОперацийПоступленияДенег());

	Возврат результат;
КонецФункции

#КонецОбласти // Инициализация
