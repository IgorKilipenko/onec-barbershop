#Область ОписаниеПеременных

&НаКлиенте
Перем _ТипыДенежныхСредств;

&НаКлиенте
Перем _ВидыОперацийПоступленияДенег;

&НаКлиенте
Перем _Состояние;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(отказ, __)
    Если Параметры.Свойство("Основание")
        И ЗначениеЗаполнено(Параметры.Основание)
        И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.РеализацияТоваровИУслуг") Тогда
        структураОплаты = Документы.РеализацияТоваровИУслуг.ПроверитьОплатуДокумента(Параметры.Основание);

        Если структураОплаты.ПризнакОплаты = Перечисления.ПризнакиОплаты.ПолностьюОплачен Тогда
            сообщениеПользователю = Новый СообщениеПользователю();
            сообщениеПользователю.Текст = "Данный документ уже полностью оплачен. Ввод дополнительного документа оплаты не требуется!";
            сообщениеПользователю.Сообщить();
            отказ = Истина;
            Возврат;
        Иначе
            Объект.СуммаДокумента = структураОплаты.ОсталосьОплатить;
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(_)
    инициализация();

    поляИзменяющиеТипФормы = Новый Массив;
    поляИзменяющиеТипФормы.Добавить(Элементы.Плательщик);
    поляИзменяющиеТипФормы.Добавить(Элементы.ТипДенежныхСредств);
    поляИзменяющиеТипФормы.Добавить(Элементы.ВидОперации);

    Для Каждого поле Из поляИзменяющиеТипФормы Цикл
        применитьНастройкиПолейФормы(Новый Структура("УправляющееПоле", поле));
    КонецЦикла;

КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипДенежныхСредствПриИзменении(_)
    изменитьТипФормы(Элементы.ТипДенежныхСредств);
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(_)
    изменитьТипФормы(Элементы.ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикПриИзменении(_)
    изменитьТипФормы(Элементы.Плательщик);
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(_)
    Если _Состояние.ОсталосьОплатить <> Неопределено И Объект.СуммаДокумента > _Состояние.ОсталосьОплатить Тогда
        форматСуммы = "ЧДЦ=2; ЧРГ= ; ЧН=0.00";
        сообщение = Новый СообщениеПользователю();
        сообщение.Текст = СтрШаблон("Введенная сумма ""%1"" превышает неоплаченный остаток: ""%2""",
                Формат(Объект.СуммаДокумента, форматСуммы),
                Формат(_Состояние.ОсталосьОплатить, форматСуммы));
        сообщение.Поле = Элементы.СуммаДокумента.Имя;
        сообщение.КлючДанных = Объект.Ссылка;
        сообщение.ПутьКДанным = "Объект";
        сообщение.Сообщить();

        Объект.СуммаДокумента = _Состояние.ОсталосьОплатить;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область СлужебныеПроцедурыИФункции

// Изменяет тип отображения формы в зависимости от указанного значения управляющего поля формы
//
// Параметры:
//	управляющееПоле - ПолеФормы - управляющее поле формы из списка: [ВидОперации | ТипДенежныхСредств | Плательщик]
//
&НаКлиенте
Асинх Процедура изменитьТипФормы(управляющееПоле)
    имяУправляющегоРеквизита = управляющееПоле.Имя;

    Если НЕ проверитьДопустимоеУправляющееПоле(управляющееПоле) Тогда
        ВызватьИсключение "Недопустимое значение управляющего поля (реквизита) формы";
    КонецЕсли;

    поляДляОчистки = Новый Массив;

    параметрыОтображенияПолей = получитьНастройкиОтображенияПолей(Элементы[имяУправляющегоРеквизита]);
    Для Каждого поле Из параметрыОтображенияПолей.СкрываемыеПоля Цикл
        Если ЗначениеЗаполнено(поле.ТекстРедактирования) Тогда
            поляДляОчистки.Добавить(поле.Имя);
        КонецЕсли;
    КонецЦикла;

    текстВопроса = сформироватьТекстЗапросаОчисткиПолей(имяУправляющегоРеквизита, поляДляОчистки);
    применитьИзменения = Истина;

    Если поляДляОчистки.Количество() > 0 И ЗначениеЗаполнено(текстВопроса) Тогда
        кодВозврата = Ждать ВопросАсинх(текстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");
        отменитьИзменение = кодВозврата <> КодВозвратаДиалога.Да;

        Если отменитьИзменение Тогда
            Объект[имяУправляющегоРеквизита] = _Состояние[имяУправляющегоРеквизита]; // Возврат значений полей (отмена очистки)
            применитьИзменения = Ложь;
        Иначе
            очиститьНеиспользуемыеРеквизитыФормы(поляДляОчистки);
        КонецЕсли;
    КонецЕсли;

    Если применитьИзменения Тогда
        применитьНастройкиПолейФормы(параметрыОтображенияПолей);
    КонецЕсли;

КонецПроцедуры

// Параметры:
//	настройкиПолей - Структура
&НаКлиенте
Процедура применитьНастройкиПолейФормы(настройкиПолей)
    Если настройкиПолей = Неопределено ИЛИ ТипЗнч(настройкиПолей) <> Тип("Структура") Тогда
        ВызватьИсключение "Недопустимое значение параметров настраиваемых полей формы";
    КонецЕсли;

    Если (НЕ настройкиПолей.Свойство("ЗначенияУстановлены")) И настройкиПолей.Свойство("УправляющееПоле") Тогда
        настройкиПолей = получитьНастройкиОтображенияПолей(настройкиПолей.УправляющееПоле);
    КонецЕсли;

    Для Каждого поле Из настройкиПолей.СкрываемыеПоля Цикл
        поле.Видимость = Ложь;
    КонецЦикла;

    Для Каждого поле Из настройкиПолей.ОтображаемыеПоля Цикл
        поле.Видимость = Истина;
    КонецЦикла;

    Если настройкиПолей.ТипПлательщика <> Неопределено И Элементы.Плательщик.Видимость Тогда
        массивОграничений = Новый Массив;
        массивОграничений.Добавить(настройкиПолей.ТипПлательщика);
        описаниеТипаПлательщика = Новый ОписаниеТипов(массивОграничений);
        Элементы.Плательщик.ОграничениеТипа = описаниеТипаПлательщика;

        Если настройкиПолей.ТипПлательщика = Тип("СправочникСсылка.Контрагенты") Тогда
            типКонтрагента = ?(Объект.ВидОперации = _ВидыОперацийПоступленияДенег.ВозвратОтПоставщика,
                    ПредопределенноеЗначение("Перечисление.ТипыКонтрагентов.Поставщик"),
                    ПредопределенноеЗначение("Перечисление.ТипыКонтрагентов.Клиент"));

            параметрыВыбораПлательщика = Новый Массив;
            параметрыВыбораПлательщика.Добавить(Новый ПараметрВыбора("Отбор.ТипКонтрагента", типКонтрагента));

            Элементы.Плательщик.ПараметрыВыбора = Новый ФиксированныйМассив(параметрыВыбораПлательщика);
        КонецЕсли;

    ИначеЕсли НЕ Элементы.Плательщик.Видимость Тогда
        Элементы.Плательщик.ОграничениеТипа = Новый ОписаниеТипов(Новый Массив);

    КонецЕсли;

    _Состояние[настройкиПолей.УправляющееПоле.Имя] = Объект[настройкиПолей.УправляющееПоле.Имя];
КонецПроцедуры

// Формирует строку вопроса для подтверждения очистки значений реквизитов
//
// Параметры:
//	имяУправляющегоПоля - Строка - имя управляющего поля (реквизита) при изменения которого выполняется очистка
//	поляДляОчистки - Массив - список имен реквизитов запрашиваемых для очистки
//
// Возвращаемое значение:
// Строка, Неопределено - текст вопроса, или Неопределено если список реквизитов пустой
//
&НаКлиенте
Функция сформироватьТекстЗапросаОчисткиПолей(Знач имяУправляющегоПоля, поляДляОчистки) // => Строка | Неопределено
    Если поляДляОчистки = Неопределено ИЛИ поляДляОчистки.Количество() = 0 Тогда
        Возврат Неопределено;
    КонецЕсли;

    текстВопроса = СтрШаблон("При изменении реквизита ""%1"" будут очищены следующие данные:", имяУправляющегоПоля);

    Для Каждого поле Из поляДляОчистки Цикл
        текстВопроса = текстВопроса + "
            | - %1";

        текстВопроса = СтрШаблон(текстВопроса, поле);
    КонецЦикла;

    Если ЗначениеЗаполнено(поляДляОчистки) Тогда
        текстВопроса = текстВопроса + "
            | Продолжить?";
    Иначе
        текстВопроса = Неопределено;
    КонецЕсли;

    Возврат текстВопроса;
КонецФункции

// Выполняет проверку является ли указанное имя реквизита именем управляющего пол: ВидОперации | ТипДенежныхСредств | Плательщик
//
// Параметры:
//	управляющееПоле - ПолеФормы
//
// Возвращаемое значение:
//	Булево - Истина если проверка успешна
&НаКлиенте
Функция проверитьДопустимоеУправляющееПоле(управляющееПоле)
    Если управляющееПоле = Элементы.ТипДенежныхСредств
        ИЛИ управляющееПоле = Элементы.ВидОперации
        ИЛИ управляющееПоле = Элементы.Плательщик Тогда

        Возврат Истина;
    КонецЕсли;

    Возврат Ложь;
КонецФункции

// Выполняет очистку ранее заполненных значений полей формы
//
// Параметры:
//	поляДляОчистки - Массив - Массив имен полей (реквизитов) для очистки
&НаКлиенте
Процедура очиститьНеиспользуемыеРеквизитыФормы(поляДляОчистки)
    Для Каждого имяРеквизита Из поляДляОчистки Цикл
        Объект[имяРеквизита] = Неопределено;
    КонецЦикла;
КонецПроцедуры

// Параметры:
//	управляющееПоле - ЭлементФормы - ВидОперации, ТипДенежныхСредств, Плательщик
//
// Возвращаемое значение:
//	- Структура, Неопределено
&НаКлиенте
Функция получитьНастройкиОтображенияПолей(управляющееПоле)

    Если управляющееПоле = Элементы.ТипДенежныхСредств Тогда
        Возврат получитьСкрываемыеПоляПриИзмененииТипаОплаты();

    ИначеЕсли управляющееПоле = Элементы.ВидОперации Тогда
        Возврат получитьСкрываемыеПоляПриИзмененииВидаОперации();

    ИначеЕсли управляющееПоле = Элементы.Плательщик Тогда
        Возврат получитьСкрываемыеПоляПриИзмененииПлательщика();

    КонецЕсли;

    Возврат Неопределено;

КонецФункции

// Определяет список скрываемых и отображаемых полей при изменении значения поля ТипДенежныхСредств
//
// Возвращаемое значение:
//	- Структура
&НаКлиенте
Функция получитьСкрываемыеПоляПриИзмененииТипаОплаты()
    Если ЗначениеЗаполнено(Объект.ТипДенежныхСредств) И (НЕ проверитьЭтоДопустимыйТипОплаты(Объект.ТипДенежныхСредств)) Тогда
        ВызватьИсключение "Недопустимый тип денежных средств";
    КонецЕсли;

    скрываемыеПоля = Новый Структура;
    изменяемыеПоля = Новый Массив;

    изменяемыеПоля.Добавить(Элементы.Касса);
    изменяемыеПоля.Добавить(Элементы.ЭквайринговыйТерминал);

    Если этоОплатаНаличными() Тогда
        скрываемыеПоля.Вставить(Элементы.ЭквайринговыйТерминал.Имя, Элементы.ЭквайринговыйТерминал);

    ИначеЕсли этоОплатаБезналичными() Тогда
        скрываемыеПоля.Вставить(Элементы.Касса.Имя, Элементы.Касса);
    КонецЕсли;

    Возврат создатьОбъектПараметровНастраиваемогоПоля(Элементы.ТипДенежныхСредств, скрываемыеПоля, изменяемыеПоля);
КонецФункции

// Определяет список скрываемых и отображаемых полей и тип значения поля Плательщик при изменении
// значения поля ВидаОперации
//
// Возвращаемое значение:
//	- Структура
&НаКлиенте
Функция получитьСкрываемыеПоляПриИзмененииВидаОперации()
    Если ЗначениеЗаполнено(Объект.ВидОперации) И (НЕ проверитьЭтоДопустимыйВидОперации(Объект.ВидОперации)) Тогда
        ВызватьИсключение "Недопустимый вид операции";
    КонецЕсли;

    скрываемыеПоля = Новый Структура;
    изменяемыеПоля = Новый Массив;
    типПлательщика = Неопределено;

    изменяемыеПоля.Добавить(Элементы.ДоговорКонтрагента);
    изменяемыеПоля.Добавить(Элементы.Плательщик);
    изменяемыеПоля.Добавить(Элементы.РасчетныйСчет);

    типПлательщика = определитьТипПлательщикаПоВидуОперации();

    Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
        Если НЕ этоВозвратОтПоставщика() Тогда
            скрываемыеПоля.Вставить(Элементы.ДоговорКонтрагента.Имя, Элементы.ДоговорКонтрагента);
        КонецЕсли;
        Если НЕ этоПолучениеНаличныхВБанке() Тогда
            скрываемыеПоля.Вставить(Элементы.РасчетныйСчет.Имя, Элементы.РасчетныйСчет);
        КонецЕсли;
    КонецЕсли;

    Возврат создатьОбъектПараметровНастраиваемогоПоля(Элементы.ВидОперации, скрываемыеПоля, изменяемыеПоля, типПлательщика);
КонецФункции

// Определяет список скрываемых и отображаемых полей при изменении значения управляющего поля Плательщик
//
// Возвращаемое значение:
//	- Структура
&НаКлиенте
Функция получитьСкрываемыеПоляПриИзмененииПлательщика()
    скрываемыеПоля = Новый Структура;
    изменяемыеПоля = Новый Массив;

    изменяемыеПоля.Добавить(Элементы.ДоговорКонтрагента);

    Если ЗначениеЗаполнено(Объект.Плательщик) И (НЕ этотКонтрагентПоставщик(Объект.Плательщик)) Тогда
        скрываемыеПоля.Вставить(Элементы.ДоговорКонтрагента.Имя, Элементы.ДоговорКонтрагента);
    КонецЕсли;

    Возврат создатьОбъектПараметровНастраиваемогоПоля(Элементы.Плательщик, скрываемыеПоля, изменяемыеПоля);
КонецФункции

// Создает объект параметров настраиваемых полей формы при указанном значении управляющего поля
//
// Параметры:
//	управляющееПоле - ПолеФормы - управляющее поле формы: ВидОперации | ТипДенежныхСредств | Плательщик
//	скрываемыеПоля - Структура - список имен и значений скрываемых полей вида: [{Ключ: Строка -> ИмяПоляФормы, Значение: ПолеФормы}]
//	изменяемыеПоля - Массив - список всех полей формы настраиваемых управляющим полем
//	типПлательщика - Тип, Неопределено - Тип значения поля Плательщик при выбранном значении управляющего поля
//
// Возвращаемое значение:
//	- Структура - объект параметров отображения настраиваемого поля
&НаКлиенте
Функция создатьОбъектПараметровНастраиваемогоПоля(управляющееПоле, скрываемыеПоля, изменяемыеПоля, типПлательщика = Неопределено)
    отображаемыеПоля = Новый Массив;
    Для Каждого поле Из изменяемыеПоля Цикл
        Если НЕ (скрываемыеПоля.Свойство(поле.Имя) ИЛИ поле.Видимость) Тогда
            отображаемыеПоля.Добавить(поле);
        КонецЕсли;
    КонецЦикла;

    скрываемыеПоляМассив = Новый Массив;
    Для Каждого элемент Из скрываемыеПоля Цикл
        Если элемент.Значение.Видимость Тогда
            скрываемыеПоляМассив.Добавить(элемент.Значение);
        КонецЕсли;
    КонецЦикла;

    результат = Новый Структура;
    результат.Вставить("ОтображаемыеПоля", отображаемыеПоля);
    результат.Вставить("УправляющееПоле", управляющееПоле);
    результат.Вставить("СкрываемыеПоля", скрываемыеПоляМассив);
    результат.Вставить("ТипПлательщика", типПлательщика);
    результат.Вставить("ЗначенияУстановлены", Истина);

    Возврат результат;
КонецФункции

// Возвращаемое значение:
//	- Тип, Неопределено
&НаКлиенте
Функция определитьТипПлательщикаПоВидуОперации()
    типПлательщика = Неопределено;

    Если этоВозвратОтПодотчетника() Тогда
        типПлательщика = Тип("СправочникСсылка.Сотрудники");

    ИначеЕсли этоПолучениеНаличныхВБанке() Тогда
        типПлательщика = Тип("СправочникСсылка.Банки");

    Иначе
        типПлательщика = Тип("СправочникСсылка.Контрагенты");

    КонецЕсли;

    Возврат типПлательщика;
КонецФункции

&НаКлиенте
Функция проверитьЭтоДопустимоеЗначениеУправляющегоПоля(Знач значение, допустимыеЗначения)
    результат = Ложь;
    Для Каждого элемент Из допустимыеЗначения Цикл
        результат = элемент.Значение = значение;
        Если результат Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;

    Возврат результат;
КонецФункции

&НаКлиенте
Функция проверитьЭтоДопустимыйВидОперации(Знач видОперации)
    Возврат проверитьЭтоДопустимоеЗначениеУправляющегоПоля(видОперации, _ВидыОперацийПоступленияДенег);
КонецФункции

&НаКлиенте
Функция проверитьЭтоДопустимыйТипОплаты(Знач типОплаты)
    Возврат проверитьЭтоДопустимоеЗначениеУправляющегоПоля(типОплаты, _ТипыДенежныхСредств);
КонецФункции

#Область СлужебныеПоля
// Параметры:
//	плательщикСсылка - СправочникСсылка.Контрагенты, Произвольный
//
// Возвращаемое значение:
//	- Булево
&НаСервереБезКонтекста
Функция этотКонтрагентКлиент(Знач плательщикСсылка)
    Возврат Справочники.Контрагенты.ЭтотКонтрагентКлиент(плательщикСсылка);
КонецФункции

// Параметры:
//	плательщикСсылка - СправочникСсылка.Контрагенты, Произвольный
//
// Возвращаемое значение:
//	- Булево
&НаСервереБезКонтекста
Функция этотКонтрагентПоставщик(Знач плательщикСсылка)
    Возврат Справочники.Контрагенты.ЭтотКонтрагентПоставщик(плательщикСсылка);
КонецФункции

// Параметры:
//	плательщикСсылка - СправочникСсылка.Банки, Произвольный
//
// Возвращаемое значение:
//	- Булево
&НаКлиенте
Функция этотПлательщикБанк(Знач плательщикСсылка)
    Возврат ТипЗнч(плательщикСсылка) = Тип("СправочникСсылка.Банки");
КонецФункции

// Параметры:
//	плательщикСсылка - СправочникСсылка.Сотрудники, Произвольный
//
// Возвращаемое значение:
//	- Булево
&НаКлиенте
Функция этотПлательщикСотрудник(Знач плательщикСсылка)
    Возврат ТипЗнч(плательщикСсылка) = Тип("СправочникСсылка.Сотрудники");
КонецФункции

// Возвращаемое значение:
//	- Булево
&НаКлиенте
Функция этоОплатаНаличными()
    Возврат Объект.ТипДенежныхСредств = _ТипыДенежныхСредств.Наличные;
КонецФункции

// Возвращаемое значение:
//	- Булево
&НаКлиенте
Функция этоОплатаБезналичными()
    Возврат Объект.ТипДенежныхСредств = _ТипыДенежныхСредств.Безналичные;
КонецФункции

// Возвращаемое значение:
//	- Булево
&НаКлиенте
Функция этоВозвратОтПодотчетника()
    Возврат Объект.ВидОперации = _ВидыОперацийПоступленияДенег.ВозвратОтПодотчетника;
КонецФункции

// Возвращаемое значение:
//	- Булево
&НаКлиенте
Функция этоВозвратОтПоставщика()
    Возврат Объект.ВидОперации = _ВидыОперацийПоступленияДенег.ВозвратОтПоставщика;
КонецФункции

// Возвращаемое значение:
//	- Булево
&НаКлиенте
Функция этоПолучениеНаличныхВБанке()
    Возврат Объект.ВидОперации = _ВидыОперацийПоступленияДенег.ПолучениеНаличныхВБанке;
КонецФункции
#КонецОбласти // СлужебныеПоля

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область Инициализация

&НаКлиенте
Процедура инициализация()
    значенияПеречислений = получитьЗначенияПеречислений();
    _ТипыДенежныхСредств = значенияПеречислений.ТипыДенежныхСредств;
    _ВидыОперацийПоступленияДенег = значенияПеречислений.ВидыОперацийПоступленияДенег;

    Если Объект.Ссылка.Пустая() Тогда
        заполнитьПоляФормыЗначениямиПоУмолчанию(НЕ ЗначениеЗаполнено(Объект.ДокументОснование));
    КонецЕсли;

    _Состояние = Новый Структура("ВидОперации, Плательщик, ТипДенежныхСредств");
    _Состояние.ВидОперации = Объект.ВидОперации;
    _Состояние.Плательщик = Объект.Плательщик;
    _Состояние.ТипДенежныхСредств = Объект.ТипДенежныхСредств;

    _Состояние.Вставить("ОсталосьОплатить", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура заполнитьПоляФормыЗначениямиПоУмолчанию(Знач принудительно = Ложь)
    Объект.ВидОперации = ?(НЕ принудительно И ЗначениеЗаполнено(Объект.ВидОперации),
            Объект.ВидОперации, _ВидыОперацийПоступленияДенег.ОплатаОтПокупателя);
    Объект.ТипДенежныхСредств = ?(НЕ принудительно И ЗначениеЗаполнено(Объект.ТипДенежныхСредств),
            Объект.ТипДенежныхСредств, _ТипыДенежныхСредств.Наличные);
КонецПроцедуры

// Возвращаемое значение:
//	- Структура
&НаСервереБезКонтекста
Функция получитьЗначенияПеречислений()
    результат = Новый Структура;
    результат.Вставить("ТипыДенежныхСредств", Документы.ПоступлениеДенежныхСредств.ПолучитьТипыДенежныхСредств());
    результат.Вставить("ВидыОперацийПоступленияДенег", Документы.ПоступлениеДенежныхСредств.ПолучитьПолучитьВидыОперацийПоступленияДенег());

    Возврат результат;
КонецФункции

#КонецОбласти // Инициализация
