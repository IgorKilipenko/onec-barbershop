#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(_, __)
    выполнитьВсеДвижения();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

#Область Движения
Процедура выполнитьВсеДвижения()
    Движения.Начисления.Записывать = Истина;
    Движения.Хозрасчетный.Записывать = Истина;
    Движения.УчетЗатрат.Записывать = Истина;

    результатДвижения = выполнитьДвиженияНачисленийПоПериодам();
    Если результатДвижения.Сообщение <> Неопределено Тогда
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = результатДвижения.Сообщение;
        сообщение.Сообщить();
    КонецЕсли;

    Движения.Начисления.Записать();
    Движения.Начисления.РассчитатьСуммуНачисления();

    данныеНачислений = РегистрыРасчета.Начисления.ПолучитьДанныеНачисленийДокумента(
            ЭтотОбъект.Ссылка, Истина, Ложь);
    ДиагностикаКлиентСервер.Утверждение(данныеНачислений.НачисленияПоСтатьямЗатрат.Количество() = 1,
            "Для документа ""Больничный лист"" количество различных записей в ""РегистреРасчетов"" должно быть = 1.");

    структураНачисления = Новый Структура("СтатьяЗатрат, Сумма");
    ЗаполнитьЗначенияСвойств(структураНачисления, данныеНачислений.НачисленияПоСтатьямЗатрат[0]);

    выполнитьДвижениеУчетЗатратОборот(структураНачисления.СтатьяЗатрат, структураНачисления.Сумма);

    структураНачисления.Вставить("Сотрудник", ЭтотОбъект.Сотрудник);
    выполнитьДвижениеБУХозрасчетный(структураНачисления);
КонецПроцедуры

Процедура выполнитьДвижениеНачисления(Знач структураНачисления)
    РегистрыРасчета.Начисления.ЗаполнитьДвижениеНачисления(
        Движения.Начисления.Добавить(), ЭтотОбъект.ПериодНачисления, структураНачисления);
КонецПроцедуры

Функция выполнитьДвиженияНачисленийПоПериодам()
    ДиагностикаКлиентСервер.Утверждение(ЗначениеЗаполнено(ЭтотОбъект.Сотрудник),
        "Поле ""Сотрудник"" должно быть заполнено до начала выполнения проведения.");

    результатДвижения = Новый Структура("Отказ, Сообщение", Ложь, Неопределено);

    окладСотрудника = РегистрыСведений.КадроваяИсторияСотрудников.ПолучитьОкладСотрудника(
            ЭтотОбъект.Сотрудник, ЭтотОбъект.ДатаОкончания);
    Если окладСотрудника = Неопределено Тогда
        результатДвижения.Сообщение = СтрШаблон(
                "Оклад сотрудника: ""%1"" на период больничного не определен.", Строка(ЭтотОбъект.Сотрудник));

        окладСотрудника = 0;
    КонецЕсли;

    месяцНачисления = НачалоМесяца(ЭтотОбъект.ДатаНачала);
    месяцОкончания = НачалоМесяца(ЭтотОбъект.ДатаОкончания);

    Пока месяцНачисления <= месяцОкончания Цикл
        структураНачисления = РегистрыРасчета.Начисления.СоздатьПустуюСтруктуруНачисления();

        структураНачисления.ВидРасчета = ПланыВидовРасчета.Начисления.Больничный;
        структураНачисления.ДатаНачала = Макс(ЭтотОбъект.ДатаНачала, месяцНачисления);
        структураНачисления.ДатаОкончания = Мин(ЭтотОбъект.ДатаОкончания, КонецМесяца(месяцНачисления));

        структураНачисления.Сотрудник = ЭтотОбъект.Сотрудник;
        структураНачисления.ПоказательРасчета = окладСотрудника;

        выполнитьДвижениеНачисления(структураНачисления);

        месяцНачисления = ДобавитьМесяц(месяцНачисления, 1);
    КонецЦикла;

    Возврат результатДвижения;
КонецФункции

Процедура выполнитьДвижениеБУХозрасчетный(Знач структураНачисления)
    движение = РегистрыБухгалтерии.Хозрасчетный.ЗаполнитьДвижениеРасчетыСПерсоналом(
            Движения.Хозрасчетный.Добавить(), ЭтотОбъект.Дата,
            структураНачисления, "Отражено начисление по больничному листу");
КонецПроцедуры

Процедура выполнитьДвижениеУчетЗатратОборот(Знач статьяЗатрат, Знач сумма)
    движение = Движения.УчетЗатрат.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.СтатьяЗатрат = статьяЗатрат;
    движение.Сумма = сумма;
КонецПроцедуры
#КонецОбласти // Движения

#КонецОбласти // СлужебныеПроцедурыИФункции
