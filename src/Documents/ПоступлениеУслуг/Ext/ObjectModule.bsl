#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(_, __, ___)
    РаботаСДокументами.ЗаполнитьПолеАвторДокументаНаСервере(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаПроведения(_, __)
    выполнитьВсеДвижения();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

#Область Движения
Процедура выполнитьВсеДвижения()
    Движения.ЦеныНоменклатурыПоставщиков.Записывать = Истина;
    Движения.УчетЗатрат.Записывать = Истина;
    Движения.Хозрасчетный.Записывать = Истина;

    выборкаУслугиПоСтатьямЗатрат = получитьВыборкуУслугиПоСтатьямЗатрат();
    ДиагностикаКлиентСервер.Утверждение(выборкаУслугиПоСтатьямЗатрат <> Неопределено,
        "Таблица услуг должна быть заполнена.");

    Пока выборкаУслугиПоСтатьямЗатрат.Следующий() Цикл
        выполнитьДвижениеУчетЗатрат(выборкаУслугиПоСтатьямЗатрат);

        выборкаУслугиПоНоменклатуре = выборкаУслугиПоСтатьямЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
        Пока выборкаУслугиПоНоменклатуре.Следующий() Цикл
            выполнитьДвижениеЦеныНоменклатурыПоставщиков(выборкаУслугиПоНоменклатуре.Номенклатура,
                выборкаУслугиПоНоменклатуре.Цена);

            выполнитьДвижениеБУХозрасчетный(выборкаУслугиПоНоменклатуре.СчетБухгалтерскогоУчета,
                выборкаУслугиПоНоменклатуре.СтатьяЗатрат, выборкаУслугиПоНоменклатуре.Сумма);
        КонецЦикла;
    КонецЦикла;
КонецПроцедуры

Процедура выполнитьДвижениеБУХозрасчетный(Знач счетДт, Знач статьяЗатрат, Знач сумма)
    движение = Движения.Хозрасчетный.Добавить();
    движение.СчетДт = счетДт;
    движение.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
    движение.Период = ЭтотОбъект.Дата;
    движение.Сумма = сумма;
    движение.Содержание = "Отражено поступление услуг от поставщика";
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетДт, движение.СубконтоДт, статьяЗатрат);
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетКт, движение.СубконтоКт, ЭтотОбъект.Поставщик);
КонецПроцедуры

Процедура выполнитьДвижениеУчетЗатрат(Знач данныеЗатрат)
    движение = Движения.УчетЗатрат.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.СтатьяЗатрат = данныеЗатрат.СтатьяЗатрат;
    движение.Сумма = данныеЗатрат.Сумма;

    ДиагностикаКлиентСервер.Утверждение(движение.Сумма <> Неопределено И движение.СтатьяЗатрат <> Неопределено,
        "Значения строки ""УчетЗатрат"" не заполнены.");
КонецПроцедуры

Процедура выполнитьДвижениеЦеныНоменклатурыПоставщиков(Знач номенклатураСсылка, Знач цена)
    движение = Движения.ЦеныНоменклатурыПоставщиков.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.Поставщик = ЭтотОбъект.Поставщик;
    движение.Номенклатура = номенклатураСсылка;
    движение.Цена = цена;
КонецПроцедуры
#КонецОбласти // Движения

// Возвращаемое значение:
//  - ВыборкаИзРезультатаЗапроса, Неопределено
Функция получитьВыборкуУслугиПоСтатьямЗатрат()
    запросУслуг = Новый Запрос;
    запросУслуг.УстановитьПараметр("Ссылка", Ссылка);
    запросУслуг.Текст =
        "ВЫБРАТЬ
        |	ПоступлениеУслугУслуги.Номенклатура КАК Номенклатура,
        |	СУММА(ПоступлениеУслугУслуги.Сумма) КАК Сумма,
        |	ПоступлениеУслугУслуги.СтатьяЗатрат КАК СтатьяЗатрат,
        |	МАКСИМУМ(ПоступлениеУслугУслуги.Цена) КАК Цена,
        |	ТаблНоменклатура.СчетБухгалтерскогоУчета КАК СчетБухгалтерскогоУчета
        |ИЗ
        |	Документ.ПоступлениеУслуг.Услуги КАК ПоступлениеУслугУслуги
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблНоменклатура
        |		ПО (ТаблНоменклатура.Ссылка = ПоступлениеУслугУслуги.Номенклатура)
        |ГДЕ
        |	ПоступлениеУслугУслуги.Ссылка = &Ссылка
        |
        |СГРУППИРОВАТЬ ПО
        |	ПоступлениеУслугУслуги.СтатьяЗатрат,
        |	ПоступлениеУслугУслуги.Номенклатура,
        |	ТаблНоменклатура.СчетБухгалтерскогоУчета
        |ИТОГИ
        |	СУММА(Сумма)
        |ПО
        |	СтатьяЗатрат
        |";

    результатЗапроса = запросУслуг.Выполнить();
    Если результатЗапроса.Пустой() Тогда
        Возврат Неопределено;
    КонецЕсли;

    выборкаИтоги = результатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    Возврат выборкаИтоги;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
