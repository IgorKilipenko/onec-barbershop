#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(_, __)
    выполнитьВсеДвижения();
КонецПроцедуры

Процедура ОбработкаЗаполнения(данныеЗаполнения, __)
    данныеЗаполненияОснования = получитьДанныеЗаполненияНаОсновании(данныеЗаполнения);
    Если данныеЗаполненияОснования <> Неопределено Тогда
        ЗаполнитьЗначенияСвойств(ЭтотОбъект, данныеЗаполненияОснования);
        ЭтотОбъект.ДокументОснование = данныеЗаполнения;
    КонецЕсли;

    РаботаСДокументами.ЗаполнитьПолеАвторДокументаНаСервере(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

Функция получитьДанныеЗаполненияНаОсновании(Знач документОснованиеСсылка)
    Если НЕ ЗначениеЗаполнено(документОснованиеСсылка) Тогда
        Возврат Неопределено;
    КонецЕсли;

    типДокументаОснования = ТипЗнч(документОснованиеСсылка);
    этоРеализацияТиУ = типДокументаОснования = Тип("ДокументСсылка.РеализацияТоваровИУслуг");
    этоПоступлениеТиМ = типДокументаОснования = Тип("ДокументСсылка.ПоступлениеТоваровИМатериалов");
    этоПоступлениеУслуг = типДокументаОснования = Тип("ДокументСсылка.ПоступлениеУслуг");

    Если НЕ (этоРеализацияТиУ ИЛИ этоПоступлениеТиМ ИЛИ этоПоступлениеУслуг) Тогда
        Возврат Неопределено;
    КонецЕсли;

    результат = Новый Структура;

    Если этоРеализацияТиУ Тогда
        результат = получитьДанныеПоРеализацииТоваровИУслуг(документОснованиеСсылка);
    Иначе
        результат = получитьДанныеПоПоступлениюТоваровИМатериаловИлиУслуг(документОснованиеСсылка);
    КонецЕсли;

    Возврат результат;
КонецФункции

Функция получитьДанныеПоРеализацииТоваровИУслуг(Знач ссылка)
    выбираемыеРеквизиты = Новый Структура;
    выбираемыеРеквизиты.Вставить("Клиент", "Плательщик");
    выбираемыеРеквизиты.Вставить("СуммаДокумента", "СуммаДокумента");

    результат = РаботаСРеквизитами.ЗначенияРеквизитовОбъекта(ссылка, выбираемыеРеквизиты);
    результат.Вставить("ВидОперации", Перечисления.ВидыОперацийПоступленияНаРасчетныйСчет.ОплатаОтПокупателя);

    Возврат результат;
КонецФункции

Функция получитьДанныеПоПоступлениюТоваровИМатериаловИлиУслуг(Знач ссылка)
    выбираемыеРеквизиты = Новый Структура;
    выбираемыеРеквизиты.Вставить("Поставщик", "Плательщик");
    выбираемыеРеквизиты.Вставить("ДоговорПоставщика", "ДоговорКонтрагента");
    выбираемыеРеквизиты.Вставить("СуммаДокумента", "СуммаДокумента");

    результат = РаботаСРеквизитами.ЗначенияРеквизитовОбъекта(ссылка, выбираемыеРеквизиты);
    результат.Вставить("ВидОперации", Перечисления.ВидыОперацийПоступленияНаРасчетныйСчет.ВозвратОтПоставщика);

    Возврат результат;
КонецФункции

#Область Движения
Процедура выполнитьВсеДвижения()
    выполнитьДвижениеДенежныеСредстваОборот();
    выполнитьДвижениеБУХозрасчетный();
КонецПроцедуры

Функция выполнитьДвижениеБУХозрасчетный()
    Движения.Хозрасчетный.Записывать = Истина;
    Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступленияНаРасчетныйСчет.ВзносНаличными Тогда
        Возврат Ложь; // Бухгалтерские проводки по взносу наличными формируются документом Расход денежных средств
    КонецЕсли;

    аналитикаПроводки = ПолучитьАналитикуПроводки();

    движение = Движения.Хозрасчетный.Добавить();
    движение.СчетДт = аналитикаПроводки.Дебет.Счет;
    движение.СчетКт = аналитикаПроводки.Кредит.Счет;
    движение.Период = ЭтотОбъект.Дата;
    движение.Сумма = СуммаДокумента;
    движение.Содержание = аналитикаПроводки.СодержаниеОперации;
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетДт, движение.СубконтоДт, аналитикаПроводки.Дебет.Субконто);
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетКт, движение.СубконтоКт, аналитикаПроводки.Кредит.Субконто);

    Возврат Истина;
КонецФункции

Процедура выполнитьДвижениеДенежныеСредстваОборот()
    Движения.ДенежныеСредства.Записывать = Истина;
    движение = Движения.ДенежныеСредства.Добавить();
    движение.ВидДвижения = ВидДвиженияНакопления.Приход;
    движение.Период = ЭтотОбъект.Дата;
    движение.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные;
    движение.БанковскийСчетКасса = ЭтотОбъект.РасчетныйСчет;
    движение.Сумма = ЭтотОбъект.СуммаДокумента;
КонецПроцедуры
#КонецОбласти // Движения

Функция ПолучитьАналитикуПроводки()
    значенияПолей = Новый Структура;
    значенияПолей.Вставить("Плательщик", ЭтотОбъект.Плательщик);
    значенияПолей.Вставить("ЭквайринговыйТерминал", ЭтотОбъект.ЭквайринговыйТерминал);
    значенияПолей.Вставить("РасчетныйСчет", ЭтотОбъект.РасчетныйСчет);

    Возврат Документы.ПоступлениеНаРасчетныйСчет.ПолучитьАналитикуПроводки(ЭтотОбъект.ВидОперации, значенияПолей);
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
