#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(отказ, __)
    результатВыполненияДвижений = выполнитьВсеДвижения();
    Если результатВыполненияДвижений.Отказ Тогда
        отказ = Истина;
    КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(данныеЗаполнения, __)
    данныеЗаполненияОснования = получитьДанныеЗаполненияНаОсновании(данныеЗаполнения);
    Если данныеЗаполненияОснования <> Неопределено Тогда
        ЗаполнитьЗначенияСвойств(ЭтотОбъект, данныеЗаполненияОснования);
        ЭтотОбъект.ДокументОснование = данныеЗаполнения;
    КонецЕсли;

    РаботаСДокументами.ЗаполнитьПолеАвторДокументаНаСервере(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

Функция получитьДанныеЗаполненияНаОсновании(Знач документОснованиеСсылка)
    Если НЕ ЗначениеЗаполнено(документОснованиеСсылка) Тогда
        Возврат Неопределено;
    КонецЕсли;

    типДокументаОснования = ТипЗнч(документОснованиеСсылка);
    этоРеализацияТиУ = типДокументаОснования = Тип("ДокументСсылка.РеализацияТоваровИУслуг");
    этоПоступлениеТиМ = типДокументаОснования = Тип("ДокументСсылка.ПоступлениеТоваровИМатериалов");
    этоПоступлениеУслуг = типДокументаОснования = Тип("ДокументСсылка.ПоступлениеУслуг");

    Если НЕ (этоРеализацияТиУ ИЛИ этоПоступлениеТиМ ИЛИ этоПоступлениеУслуг) Тогда
        Возврат Неопределено;
    КонецЕсли;

    результат = Новый Структура;

    Если этоРеализацияТиУ Тогда
        результат = получитьДанныеПоРеализацииТоваровИУслуг(документОснованиеСсылка);
    Иначе
        результат = получитьДанныеПоПоступлениюТоваровИМатериаловИлиУслуг(документОснованиеСсылка);
    КонецЕсли;

    Возврат результат;
КонецФункции

Функция получитьДанныеПоРеализацииТоваровИУслуг(Знач ссылка)
    выбираемыеРеквизиты = Новый Структура;
    выбираемыеРеквизиты.Вставить("Клиент", "Плательщик");
    выбираемыеРеквизиты.Вставить("СуммаДокумента", "СуммаДокумента");

    результат = РаботаСРеквизитами.ЗначенияРеквизитовОбъекта(ссылка, выбираемыеРеквизиты);
    результат.Вставить("ВидОперации", Перечисления.ВидыОперацийПоступленияНаРасчетныйСчет.ОплатаОтПокупателя);

    Возврат результат;
КонецФункции

Функция получитьДанныеПоПоступлениюТоваровИМатериаловИлиУслуг(Знач ссылка)
    выбираемыеРеквизиты = Новый Структура;
    выбираемыеРеквизиты.Вставить("Поставщик", "Плательщик");
    выбираемыеРеквизиты.Вставить("ДоговорПоставщика", "ДоговорКонтрагента");
    выбираемыеРеквизиты.Вставить("СуммаДокумента", "СуммаДокумента");

    результат = РаботаСРеквизитами.ЗначенияРеквизитовОбъекта(ссылка, выбираемыеРеквизиты);
    результат.Вставить("ВидОперации", Перечисления.ВидыОперацийПоступленияНаРасчетныйСчет.ВозвратОтПоставщика);

    Возврат результат;
КонецФункции

#Область Движения
Функция выполнитьВсеДвижения()
    результат = Новый Структура("Отказ", Ложь);
    // Очистка УчетДебиторскойЗадолженности
    Движения.УчетДебиторскойЗадолженности.Записывать = Истина;
    Движения.УчетДебиторскойЗадолженности.Записать();

    Движения.ДенежныеСредства.Записывать = Истина;
    Движения.Хозрасчетный.Записывать = Истина;
    Движения.УчетДебиторскойЗадолженности.Записывать = Истина;

    Если получитьЭтоДокументНаОснованииРеализацииТиУ() Тогда
        выполнитьДвижениеУчетДебиторскойЗадолженностиРасход();
        результатКонтроляДвижения = выполнитьКонтрольОстатковЗадолженности();
        Если результатКонтроляДвижения.Отказ Тогда
            результат.Отказ = Истина;
        КонецЕсли;
    КонецЕсли;

    выполнитьДвижениеДенежныеСредстваОборот();
    выполнитьДвижениеБУХозрасчетный();

    Возврат результат;
КонецФункции

Функция выполнитьДвижениеБУХозрасчетный()
    Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПоступленияНаРасчетныйСчет.ВзносНаличными Тогда
        Возврат Ложь; // Бухгалтерские проводки по взносу наличными формируются документом Расход денежных средств
    КонецЕсли;

    аналитикаПроводки = ПолучитьАналитикуПроводки();

    движение = Движения.Хозрасчетный.Добавить();
    движение.СчетДт = аналитикаПроводки.Дебет.Счет;
    движение.СчетКт = аналитикаПроводки.Кредит.Счет;
    движение.Период = ЭтотОбъект.Дата;
    движение.Сумма = СуммаДокумента;
    движение.Содержание = аналитикаПроводки.СодержаниеОперации;
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетДт, движение.СубконтоДт, аналитикаПроводки.Дебет.Субконто);
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетКт, движение.СубконтоКт, аналитикаПроводки.Кредит.Субконто);

    Возврат Истина;
КонецФункции

Процедура выполнитьДвижениеДенежныеСредстваОборот()
    движение = Движения.ДенежныеСредства.Добавить();
    движение.ВидДвижения = ВидДвиженияНакопления.Приход;
    движение.Период = ЭтотОбъект.Дата;
    движение.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные;
    движение.БанковскийСчетКасса = ЭтотОбъект.РасчетныйСчет;
    движение.Сумма = ЭтотОбъект.СуммаДокумента;
КонецПроцедуры

Процедура выполнитьДвижениеУчетДебиторскойЗадолженностиРасход()
    ДиагностикаКлиентСервер.Утверждение(получитьЭтоДокументНаОснованииРеализацииТиУ(),
        СтрШаблон("Документ основание должен иметь тип значения ""%1"".",
            Строка(Тип("ДокументСсылка.РеализацияТоваровИУслуг"))));

    движение = Движения.УчетДебиторскойЗадолженности.Добавить();
    движение.ВидДвижения = ВидДвиженияНакопления.Расход;
    движение.Период = ЭтотОбъект.Дата;
    движение.ДокументНаОплату = ЭтотОбъект.ДокументОснование;

    документаРТУ = РаботаСРеквизитами.ЗначенияРеквизитовОбъекта(ЭтотОбъект.ДокументОснование, "Клиент");
    ДиагностикаКлиентСервер.Утверждение(документаРТУ.Клиент = ЭтотОбъект.Плательщик,
            "Контрагенты для документов реализации и платежей должны совпадать.");

    движение.Контрагент = документаРТУ.Клиент;
    движение.Сумма = ЭтотОбъект.СуммаДокумента;
КонецПроцедуры

Функция выполнитьКонтрольОстатковЗадолженности()
    результат = Новый Структура("Отказ", Ложь);

    // Запись движений для последующего контроля
    Движения.УчетДебиторскойЗадолженности.БлокироватьДляИзменения = Истина;
    Движения.УчетДебиторскойЗадолженности.Записать();

    ДиагностикаКлиентСервер.Утверждение(получитьЭтоДокументНаОснованииРеализацииТиУ(),
        СтрШаблон("Документ должен быть создан на основании ""%1"".", Строка(Тип("ДокументСсылка.РеализацияТоваровИУслуг"))));

    статусОплаты_ = Документы.РеализацияТоваровИУслуг.ПроверитьСтатусОплаты(ЭтотОбъект.ДокументОснование, Неопределено);
    Если статусОплаты_.ОсталосьОплатить < 0 Тогда
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = СтрШаблон("Сумма документа превышает остаток задолженности по оплате на ""%1 руб."".
                |Неоплаченный остаток по документу ""%2"" составляет: ""%3 руб.""",
                -статусОплаты_.ОсталосьОплатить,
                статусОплаты_.Представление,
                ЭтотОбъект.СуммаДокумента + статусОплаты_.ОсталосьОплатить);
        сообщение.Сообщить();

        результат.Отказ = Истина;
        Возврат результат;
    КонецЕсли;

    Возврат результат;
КонецФункции
#КонецОбласти // Движения

Функция ПолучитьАналитикуПроводки()
    значенияПолей = Новый Структура;
    значенияПолей.Вставить("Плательщик", ЭтотОбъект.Плательщик);
    значенияПолей.Вставить("ЭквайринговыйТерминал", ЭтотОбъект.ЭквайринговыйТерминал);
    значенияПолей.Вставить("РасчетныйСчет", ЭтотОбъект.РасчетныйСчет);

    Возврат Документы.ПоступлениеНаРасчетныйСчет.ПолучитьАналитикуПроводки(ЭтотОбъект.ВидОперации, значенияПолей);
КонецФункции

Функция получитьЭтоДокументНаОснованииРеализацииТиУ()
    Возврат ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование)
    И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровИУслуг");
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
