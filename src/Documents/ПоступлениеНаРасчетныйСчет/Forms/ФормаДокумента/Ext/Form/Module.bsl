#Область ОписаниеПеременных

&НаКлиенте
Перем _ВидыОперацийПоступленияНаРасчетныйСчет;

&НаКлиенте
Перем _ТипыКонтрагентов;

&НаКлиенте
Перем _Состояние;

#КонецОбласти // ОписаниеПеременных

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(_)
    инициализация();

    поляИзменяющиеТипФормы = Новый Массив;
    поляИзменяющиеТипФормы.Добавить(Элементы.Плательщик);
    поляИзменяющиеТипФормы.Добавить(Элементы.ВидОперации);

    Для Каждого поле Из поляИзменяющиеТипФормы Цикл
        применитьНастройкиПолейФормы(Новый Структура("УправляющееПоле", поле));
    КонецЦикла;

КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(_)
    изменитьТипФормы(Элементы.ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикПриИзменении(_)
    изменитьТипФормы(Элементы.Плательщик);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область СлужебныеПроцедурыИФункции

// Изменяет тип отображения формы в зависимости от указанного значения управляющего поля формы
//
// Параметры:
//	управляющееПоле - ПолеФормы - управляющее поле формы из списка: [ВидОперации | Плательщик]
//
&НаКлиенте
Асинх Процедура изменитьТипФормы(управляющееПоле)
    имяУправляющегоРеквизита = управляющееПоле.Имя;

    Если НЕ проверитьДопустимоеУправляющееПоле(управляющееПоле) Тогда
        ВызватьИсключение "Недопустимое значение управляющего поля (реквизита) формы";
    КонецЕсли;

    поляДляОчистки = Новый Массив;

    параметрыОтображенияПолей = получитьНастройкиОтображенияПолей(Элементы[имяУправляющегоРеквизита]);
    Для Каждого поле Из параметрыОтображенияПолей.СкрываемыеПоля Цикл
        Если ЗначениеЗаполнено(поле.ТекстРедактирования) Тогда
            поляДляОчистки.Добавить(поле.Имя);
        КонецЕсли;
    КонецЦикла;

    текстВопроса = сформироватьТекстЗапросаОчисткиПолей(имяУправляющегоРеквизита, поляДляОчистки);
    применитьИзменения = Истина;

    Если поляДляОчистки.Количество() > 0 И ЗначениеЗаполнено(текстВопроса) Тогда
        кодВозврата = Ждать ВопросАсинх(текстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");
        отменитьИзменение = кодВозврата <> КодВозвратаДиалога.Да;

        Если отменитьИзменение Тогда
            Объект[имяУправляющегоРеквизита] = _Состояние[имяУправляющегоРеквизита]; // Возврат значений полей (отмена очистки)
            применитьИзменения = Ложь;
        Иначе
            очиститьНеиспользуемыеРеквизитыФормы(поляДляОчистки);
        КонецЕсли;
    КонецЕсли;

    Если применитьИзменения Тогда
        применитьНастройкиПолейФормы(параметрыОтображенияПолей);
    КонецЕсли;

КонецПроцедуры

// Параметры:
//	настройкиПолей - Структура
&НаКлиенте
Процедура применитьНастройкиПолейФормы(настройкиПолей)
    Если настройкиПолей = Неопределено ИЛИ ТипЗнч(настройкиПолей) <> Тип("Структура") Тогда
        ВызватьИсключение "Недопустимое значение параметров настраиваемых полей формы";
    КонецЕсли;

    Если (НЕ настройкиПолей.Свойство("ЗначенияУстановлены")) И настройкиПолей.Свойство("УправляющееПоле") Тогда
        настройкиПолей = получитьНастройкиОтображенияПолей(настройкиПолей.УправляющееПоле);
    КонецЕсли;

    Для Каждого поле Из настройкиПолей.СкрываемыеПоля Цикл
        поле.Видимость = Ложь;
    КонецЦикла;

    Для Каждого поле Из настройкиПолей.ОтображаемыеПоля Цикл
        поле.Видимость = Истина;
    КонецЦикла;

    Если настройкиПолей.ТипПлательщика <> Неопределено И Элементы.Плательщик.Видимость Тогда
        массивОграничений = Новый Массив;
        массивОграничений.Добавить(настройкиПолей.ТипПлательщика);
        описаниеТипаПлательщика = Новый ОписаниеТипов(массивОграничений);
        Элементы.Плательщик.ОграничениеТипа = описаниеТипаПлательщика;

        параметрыВыбораПлательщика = Новый Массив;
        параметрыВыбораПлательщика.Добавить(Новый ПараметрВыбора("Отбор.ТипКонтрагента", настройкиПолей.ТипПлательщика));

        Элементы.Плательщик.ПараметрыВыбора = Новый ФиксированныйМассив(параметрыВыбораПлательщика);

    ИначеЕсли НЕ Элементы.Плательщик.Видимость Тогда
        Элементы.Плательщик.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
    КонецЕсли;

    _Состояние[настройкиПолей.УправляющееПоле.Имя] = Объект[настройкиПолей.УправляющееПоле.Имя];
КонецПроцедуры

// Формирует строку вопроса для подтверждения очистки значений реквизитов
//
// Параметры:
//	имяУправляющегоПоля - Строка - имя управляющего поля (реквизита) при изменения которого выполняется очистка
//	поляДляОчистки - Массив - список имен реквизитов запрашиваемых для очистки
//
// Возвращаемое значение:
// Строка, Неопределено - текст вопроса, или Неопределено если список реквизитов пустой
//
&НаКлиенте
Функция сформироватьТекстЗапросаОчисткиПолей(Знач имяУправляющегоПоля, поляДляОчистки)
    Если поляДляОчистки = Неопределено ИЛИ поляДляОчистки.Количество() = 0 Тогда
        Возврат Неопределено;
    КонецЕсли;

    текстВопроса = СтрШаблон("При изменении реквизита ""%1"" будут очищены следующие данные:", имяУправляющегоПоля);

    Для Каждого поле Из поляДляОчистки Цикл
        текстВопроса = текстВопроса + "
            | - %1";

        текстВопроса = СтрШаблон(текстВопроса, поле);
    КонецЦикла;

    Если ЗначениеЗаполнено(поляДляОчистки) Тогда
        текстВопроса = текстВопроса + "
            | Продолжить?";
    Иначе
        текстВопроса = Неопределено;
    КонецЕсли;

    Возврат текстВопроса;
КонецФункции

// Выполняет проверку является ли указанное имя реквизита именем управляющего пол: ВидОперации | Плательщик
//
// Параметры:
//	управляющееПоле - ПолеФормы
//
// Возвращаемое значение:
//	Булево - Истина если проверка успешна
&НаКлиенте
Функция проверитьДопустимоеУправляющееПоле(управляющееПоле)
    Если управляющееПоле = Элементы.ВидОперации
        ИЛИ управляющееПоле = Элементы.Плательщик Тогда

        Возврат Истина;
    КонецЕсли;

    Возврат Ложь;
КонецФункции

// Выполняет очистку ранее заполненных значений полей формы
//
// Параметры:
//	поляДляОчистки - Массив - Массив имен полей (реквизитов) для очистки
&НаКлиенте
Процедура очиститьНеиспользуемыеРеквизитыФормы(поляДляОчистки)
    Для Каждого имяРеквизита Из поляДляОчистки Цикл
        Объект[имяРеквизита] = Неопределено;
    КонецЦикла;
КонецПроцедуры

// Параметры:
//	управляющееПоле - ЭлементФормы - ВидОперации, Плательщик
//
// Возвращаемое значение:
//	- Структура, Неопределено
&НаКлиенте
Функция получитьНастройкиОтображенияПолей(Знач управляющееПоле)

    Если управляющееПоле = Элементы.ВидОперации Тогда
        Возврат получитьСкрываемыеПоляПриИзмененииВидаОперации();

    ИначеЕсли управляющееПоле = Элементы.Плательщик Тогда
        Возврат получитьСкрываемыеПоляПриИзмененииПлательщика();

    КонецЕсли;

    Возврат Неопределено;

КонецФункции

// Определяет список скрываемых и отображаемых полей и тип значения поля Плательщик при изменении
// значения поля ВидаОперации
//
// Возвращаемое значение:
//	- Структура
&НаКлиенте
Функция получитьСкрываемыеПоляПриИзмененииВидаОперации()
    Если ЗначениеЗаполнено(Объект.ВидОперации) И (НЕ проверитьЭтоДопустимыйВидОперации(Объект.ВидОперации)) Тогда
        ВызватьИсключение "Недопустимый вид операции";
    КонецЕсли;

    скрываемыеПоля = Новый Структура;
    изменяемыеПоля = Новый Массив;
    типПлательщика = Неопределено;

    изменяемыеПоля.Добавить(Элементы.ДоговорКонтрагента);
    изменяемыеПоля.Добавить(Элементы.Плательщик);
    изменяемыеПоля.Добавить(Элементы.Касса);
    изменяемыеПоля.Добавить(Элементы.ЭквайринговыйТерминал);

    типПлательщика = определитьТипКонтрагентаПоВидуОперации();

    Если ЗначениеЗаполнено(Объект.ВидОперации) И (НЕ этоВозвратОтПоставщика()) Тогда
        скрываемыеПоля.Вставить(Элементы.ДоговорКонтрагента.Имя, Элементы.ДоговорКонтрагента);
    КонецЕсли;

    Если этоВзносНаличными() Тогда
        скрываемыеПоля.Вставить(Элементы.ЭквайринговыйТерминал.Имя, Элементы.ЭквайринговыйТерминал);
    ИначеЕсли этоОплатаПоБанковскимКартам() Тогда
        скрываемыеПоля.Вставить(Элементы.Касса.Имя, Элементы.Касса);
    ИначеЕсли этоОплатаОтПокупателя() ИЛИ этоВозвратОтПоставщика() Тогда
        скрываемыеПоля.Вставить(Элементы.ЭквайринговыйТерминал.Имя, Элементы.ЭквайринговыйТерминал);
        скрываемыеПоля.Вставить(Элементы.Касса.Имя, Элементы.Касса);
    КонецЕсли;

    Возврат создатьОбъектПараметровНастраиваемогоПоля(Элементы.ВидОперации, скрываемыеПоля, изменяемыеПоля, типПлательщика);
КонецФункции

// Определяет список скрываемых и отображаемых полей при изменении значения управляющего поля Плательщик
//
// Возвращаемое значение:
//	- Структура
&НаКлиенте
Функция получитьСкрываемыеПоляПриИзмененииПлательщика()
    скрываемыеПоля = Новый Структура;
    изменяемыеПоля = Новый Массив;

    изменяемыеПоля.Добавить(Элементы.ДоговорКонтрагента);

    Если ЗначениеЗаполнено(Объект.Плательщик) И (НЕ этотКонтрагентПоставщик(Объект.Плательщик)) Тогда
        скрываемыеПоля.Вставить(Элементы.ДоговорКонтрагента.Имя, Элементы.ДоговорКонтрагента);
    КонецЕсли;

    Возврат создатьОбъектПараметровНастраиваемогоПоля(Элементы.Плательщик, скрываемыеПоля, изменяемыеПоля);
КонецФункции

// Создает объект параметров настраиваемых полей формы при указанном значении управляющего поля
//
// Параметры:
//	управляющееПоле - ПолеФормы - управляющее поле формы: ВидОперации | Плательщик
//	скрываемыеПоля - Структура - список имен и значений скрываемых полей вида: [{Ключ: Строка -> ИмяПоляФормы, Значение: ПолеФормы}]
//	изменяемыеПоля - Массив - список всех полей формы настраиваемых управляющим полем
//	типПлательщика - Тип, Неопределено - Тип значения поля Плательщик при выбранном значении управляющего поля
//
// Возвращаемое значение:
//	- Структура - объект параметров отображения настраиваемого поля
&НаКлиенте
Функция создатьОбъектПараметровНастраиваемогоПоля(Знач управляющееПоле, Знач скрываемыеПоля,
        Знач изменяемыеПоля, Знач типПлательщика = Неопределено)

    отображаемыеПоля = Новый Массив;
    Для Каждого поле Из изменяемыеПоля Цикл
        Если НЕ (скрываемыеПоля.Свойство(поле.Имя) ИЛИ поле.Видимость) Тогда
            отображаемыеПоля.Добавить(поле);
        КонецЕсли;
    КонецЦикла;

    скрываемыеПоляМассив = Новый Массив;
    Для Каждого элемент Из скрываемыеПоля Цикл
        Если элемент.Значение.Видимость Тогда
            скрываемыеПоляМассив.Добавить(элемент.Значение);
        КонецЕсли;
    КонецЦикла;

    результат = Новый Структура;
    результат.Вставить("ОтображаемыеПоля", отображаемыеПоля);
    результат.Вставить("УправляющееПоле", управляющееПоле);
    результат.Вставить("СкрываемыеПоля", скрываемыеПоляМассив);
    результат.Вставить("ТипПлательщика", типПлательщика);
    результат.Вставить("ЗначенияУстановлены", Истина);

    Возврат результат;
КонецФункции

// Возвращаемое значение:
//	- ПеречислениеСсылка.ТипыКонтрагентов, Неопределено
&НаКлиенте
Функция определитьТипКонтрагентаПоВидуОперации()
    типКонтрагента = Неопределено;

    Если этоВзносНаличными() ИЛИ этоОплатаПоБанковскимКартам() Тогда
        Возврат типКонтрагента;

    ИначеЕсли этоОплатаОтПокупателя() Тогда
        типКонтрагента = _ТипыКонтрагентов.Клиент;

    ИначеЕсли этоВозвратОтПоставщика() Тогда
        типКонтрагента = _ТипыКонтрагентов.Поставщик;

    КонецЕсли;

    Возврат типКонтрагента;
КонецФункции

&НаКлиенте
Функция проверитьЭтоДопустимоеЗначениеУправляющегоПоля(Знач значение, Знач допустимыеЗначения)
    результат = Ложь;
    Для Каждого элемент Из допустимыеЗначения Цикл
        результат = элемент.Значение = значение;
        Если результат Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;

    Возврат результат;
КонецФункции

&НаКлиенте
Функция проверитьЭтоДопустимыйВидОперации(Знач видОперации)
    Возврат проверитьЭтоДопустимоеЗначениеУправляющегоПоля(видОперации, _ВидыОперацийПоступленияНаРасчетныйСчет);
КонецФункции

#Область СлужебныеПоля
// Параметры:
//	плательщикСсылка - СправочникСсылка.Контрагенты, Произвольный
//
// Возвращаемое значение:
//	- Булево
&НаСервереБезКонтекста
Функция этотКонтрагентПоставщик(Знач плательщикСсылка)
    Возврат Справочники.Контрагенты.ЭтотКонтрагентПоставщик(плательщикСсылка);
КонецФункции

// Возвращаемое значение:
//	- Булево
&НаКлиенте
Функция этоВзносНаличными()
    Возврат Объект.ВидОперации = _ВидыОперацийПоступленияНаРасчетныйСчет.ВзносНаличными;
КонецФункции

// Возвращаемое значение:
//	- Булево
&НаКлиенте
Функция этоВозвратОтПоставщика()
    Возврат Объект.ВидОперации = _ВидыОперацийПоступленияНаРасчетныйСчет.ВозвратОтПоставщика;
КонецФункции

// Возвращаемое значение:
//	- Булево
&НаКлиенте
Функция этоОплатаОтПокупателя()
    Возврат Объект.ВидОперации = _ВидыОперацийПоступленияНаРасчетныйСчет.ОплатаОтПокупателя;
КонецФункции

// Возвращаемое значение:
//	- Булево
&НаКлиенте
Функция этоОплатаПоБанковскимКартам()
    Возврат Объект.ВидОперации = _ВидыОперацийПоступленияНаРасчетныйСчет.ОплатаПоБанковскимКартам;
КонецФункции
#КонецОбласти // СлужебныеПоля

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область Инициализация

&НаКлиенте
Процедура инициализация()
    значенияПеречислений = получитьЗначенияПеречислений();
    _ВидыОперацийПоступленияНаРасчетныйСчет = значенияПеречислений.ВидыОперацийПоступленияНаРасчетныйСчет;
    _ТипыКонтрагентов = значенияПеречислений.ТипыКонтрагентов;

    Если Объект.Ссылка.Пустая() Тогда
        заполнитьПоляФормыЗначениямиПоУмолчанию(НЕ ЗначениеЗаполнено(Объект.ДокументОснование));
    КонецЕсли;

    _Состояние = Новый Структура("ВидОперации, Плательщик");
    _Состояние.ВидОперации = Объект.ВидОперации;
    _Состояние.Плательщик = Объект.Плательщик;

    _Состояние.Вставить("ОсталосьОплатить", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура заполнитьПоляФормыЗначениямиПоУмолчанию(Знач принудительно = Ложь)
    Объект.ВидОперации = ?(НЕ принудительно И ЗначениеЗаполнено(Объект.ВидОперации),
            Объект.ВидОперации, _ВидыОперацийПоступленияНаРасчетныйСчет.ОплатаОтПокупателя);
КонецПроцедуры

// Возвращаемое значение:
//	- Структура
&НаСервереБезКонтекста
Функция получитьЗначенияПеречислений()
    результат = Новый Структура;
    результат.Вставить("ВидыОперацийПоступленияНаРасчетныйСчет",
        Документы.ПоступлениеНаРасчетныйСчет.ПолучитьВидыОперацийПоступленияНаРасчетныйСчет());
    результат.Вставить("ТипыКонтрагентов", Справочники.Контрагенты.ПолучитьТипыКонтрагентов());
    Возврат результат;
КонецФункции

#КонецОбласти // Инициализация
