#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(_)
    ЭтотОбъект._Состояние = Новый Структура("АктивнаяФормаПрайсЛиста");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(имяСобытия, параметрыСобытия, ___)
    Если НЕ проверитьЭтоОповещениеЗагрузкиПрайсЛиста(имяСобытия, параметрыСобытия) Тогда
        Возврат;
    КонецЕсли;

    формаЗагрузчика = получитьДанныеОповещенияЗагрузчикаПрайсЛиста(параметрыСобытия);
    ДиагностикаКлиентСервер.Утверждение(формаЗагрузчика <> Неопределено);

    создатьДокументУстановкиЦен(формаЗагрузчика.ДатаПрайсЛиста, формаЗагрузчика.Поставщик, формаЗагрузчика.ПрайсЛист);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

// Создает и записывает новый документ УстановкаЦенПоставщика.
//  После создания документа выполняется закрытие формы загрузчика
//  прайс-листа и открывается форма созданного документа.
// Параметры:
//  _ - Неопределено - [Команда] - Не используется
&НаКлиенте
Процедура СоздатьИзПрайсЛиста(_)
    формаЗагрузчика = ФормыКонфигурацииКлиент.ОткрытьФормуЗагрузкиПрайсЛиста(ЭтотОбъект,
            Новый Структура("СоздательФормы", ЭтотОбъект.УникальныйИдентификатор));
    ЭтотОбъект._Состояние.АктивнаяФормаПрайсЛиста = формаЗагрузчика;
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

// Создает новый документ и открывает его форму
// Параметры:
//  дата - Дата - Дата прайс-листа (дата документа)
//  контрагент - СправочникСсылка.Контрагенты
//  прайсЛист - ТабличныйДокумент
&НаКлиенте
Процедура создатьДокументУстановкиЦен(Знач дата, Знач контрагент, Знач прайсЛист)
    документУстановкиЦенСсылка = создатьДокументНаСервере(
            дата, контрагент, прайсЛист);

    Если документУстановкиЦенСсылка.Пустая() Тогда
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст =
            "В документе отсутствуют данные цен номенклатуры, либо номенклатура из прайс-листа не содержится в справочнике ""Номенклатура"".
            |Создание документа отменено.";
        сообщение.Сообщить();

        Возврат;
    КонецЕсли;

    // Устарела. Необходимо либо добавить обработку события - при закрытии формы загрузчика
    //   и обновлять состояние АктивнаяФормаПрайсЛиста, либо зарывать форму полученную из данных оповещения
    Если ЭтотОбъект._Состояние.АктивнаяФормаПрайсЛиста <> Неопределено Тогда
        ЭтотОбъект._Состояние.АктивнаяФормаПрайсЛиста.Закрыть();
        ЭтотОбъект._Состояние.АктивнаяФормаПрайсЛиста = Неопределено;
    КонецЕсли;

    открытьФормуСозданногоДокумента(документУстановкиЦенСсылка);
КонецПроцедуры

// Создает новый документ УстановкаЦенПоставщика и заполняет таблицу цен номенклатуры из прайс листа
// Параметры:
//  дата - Дата - Дата прайс-листа (дата документа)
//  контрагент - СправочникСсылка.Контрагенты
//  прайсЛист - ТабличныйДокумент
// Возвращаемое значение:
//  - ДокументСсылка.УстановкаЦенПоставщика
&НаСервереБезКонтекста
Функция создатьДокументНаСервере(Знач дата, Знач контрагент, Знач прайсЛист)
    документУстановкиЦен = Документы.УстановкаЦенПоставщика.СоздатьДокумент();

    документУстановкиЦен.Дата = дата;
    документУстановкиЦен.Контрагент = контрагент;
    Документы.УстановкаЦенПоставщика.ЗаполнитьТаблицуТоваров(документУстановкиЦен.Товары, прайсЛист);

    Если документУстановкиЦен.Товары.Количество() > 0 Тогда
        документУстановкиЦен.АвторДокумента = ПараметрыСеанса.ТекущийПользователь;
        документУстановкиЦен.Записать();
    КонецЕсли;

    Возврат документУстановкиЦен.Ссылка;
КонецФункции

// Устарела. Необходимо вынести в Менеджер или ОбщийМодуль
//
// Возвращает полное имя метаданных формы документа УстановкаЦенПоставщика
// Параметры:
//  документСсылка - ДокументСсылка, Неопределено
// Возвращаемое значение:
//  - Строка
&НаСервереБезКонтекста
Функция получитьПолноеИмяФормыДокументаНаСервере(Знач документСсылка = Неопределено)
    Если документСсылка = Неопределено Тогда
        Возврат Метаданные.Документы.УстановкаЦенПоставщика.Формы.ФормаДокумента.ПолноеИмя();
    КонецЕсли;

    метаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(документСсылка));
    Если метаданныеОбъекта = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Возврат метаданныеОбъекта.Формы.ФормаДокумента.ПолноеИмя();
КонецФункции

// Выполняет проверку является ли источник оповещения подчиненной формой
// Параметры:
//  имяСобытия - Строка - Имя события из оповещения
//  параметрыСобытия - Произвольный
// Возвращаемое значение:
//  Булево
&НаКлиенте
Функция проверитьЭтоОповещениеЗагрузкиПрайсЛиста(Знач имяСобытия, Знач параметрыСобытия)
    Если имяСобытия <> "ЗаписьПрайсЛистаВДокумент" Тогда
        Возврат Ложь;
    КонецЕсли;

    Возврат РаботаСФормамиКлиент.проверитьЭтоОповещениеПодчиненнойФормы(ЭтотОбъект, имяСобытия, параметрыСобытия);
КонецФункции

// Параметры:
//  параметрыСобытия - Структура, ФиксированнаяСтруктура
//      * Объект - Обработки.ЗагрузкаПрайсЛиста.Форма
// Возвращаемое значение:
//  Обработки.ЗагрузкаПрайсЛиста.Форма
&НаКлиенте
Функция получитьДанныеОповещенияЗагрузчикаПрайсЛиста(Знач параметрыСобытия)
    загрузчик = Неопределено;
    параметрыСобытия.Свойство("Объект", загрузчик);

    Если загрузчик <> Неопределено Тогда
        ДиагностикаКлиентСервер.Утверждение(загрузчик <> Неопределено);
        ДиагностикаКлиентСервер.Утверждение(загрузчик.ДатаПрайсЛиста <> Неопределено);
        ДиагностикаКлиентСервер.Утверждение(загрузчик.ПрайсЛист <> Неопределено);
        ДиагностикаКлиентСервер.Утверждение(загрузчик.Поставщик <> Неопределено);
    КонецЕсли;

    Возврат загрузчик;
КонецФункции

// Параметры:
//  документСсылка - ДокументСсылка.УстановкаЦенПоставщика - ссылка на созданный документ
&НаКлиенте
Процедура открытьФормуСозданногоДокумента(Знач документСсылка)
    ОткрытьФорму(получитьПолноеИмяФормыДокументаНаСервере(документСсылка),
        Новый Структура("Ключ, СообщениеПриСоздании", документСсылка,
            "Документ создан по данным из прайс-листа."));
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
