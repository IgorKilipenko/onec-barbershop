#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    сообщениеПриСоздании = Неопределено;
    Параметры.Свойство("СообщениеПриСоздании", сообщениеПриСоздании);

    Если ТипЗнч(сообщениеПриСоздании) = Тип("Строка") И НЕ ПустаяСтрока(сообщениеПриСоздании) Тогда
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = сообщениеПриСоздании;
        сообщение.Сообщить();
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(имяСобытия, параметрыСобытия, ___)
    Если проверитьЭтоОповещениеПодчиненнойФормы(имяСобытия, параметрыСобытия) Тогда
        загрузчик = получитьДанныеОповещенияЗагрузчикаПрайсЛиста(параметрыСобытия);

        ДиагностикаКлиентСервер.Утверждение(загрузчик <> Неопределено);

        заполнитьТаблицуТоваров(загрузчик.ПрайсЛист);
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

// Выполняет загрузку прайс-листа в таблицу формы (Товары).
// Загрузка выполняется через форму Обработки.ЗагрузкаПрайсЛиста.Форма.
// Параметры:
//  _ - Неопределено - [Команда] - Не используется
&НаКлиенте
Процедура ЗагрузитьПрайсЛист(_)
    форма = ФормыКонфигурацииКлиент.ОткрытьФормуЗагрузкиПрайсЛиста(
            ЭтотОбъект, Новый Структура("СоздательФормы, Дата, Контрагент",
                ЭтотОбъект.УникальныйИдентификатор, Объект.Дата, Объект.Контрагент));
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  прайсЛист - ТабличныйДокумент
//  очиститьТаблицу - Булево
//  оповеститьПользователя - Булево
&НаКлиенте
Процедура заполнитьТаблицуТоваров(Знач прайсЛист, очиститьТаблицу = Истина, оповеститьПользователя = Истина)
    Если очиститьТаблицу Тогда
        Объект.Товары.Очистить();
    КонецЕсли;

    количествоЗаполненныхСтрок = заполнитьТаблицуТоваровНаСервере(прайсЛист);

    Если оповеститьПользователя Тогда
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = СтрШаблон("Из прайс-листа заполнено ""%1"" строк.", количествоЗаполненныхСтрок);
        сообщение.Сообщить();
    КонецЕсли;
КонецПроцедуры

// Параметры:
//  прайсЛист - ТабличныйДокумент
// Возвращаемое значение:
//  Число - Количество строк записанных в таблицу товаров из таблицы прайс-листа
&НаСервере
Функция заполнитьТаблицуТоваровНаСервере(Знач прайсЛист)
    Возврат Документы.УстановкаЦенПоставщика.ЗаполнитьТаблицуТоваров(Объект.Товары, прайсЛист);
КонецФункции

// Выполняет проверку является ли источник оповещения подчиненной формой
// Параметры:
//  имяСобытия - Строка - Имя события из оповещения
//  параметрыСобытия - Произвольный
// Возвращаемое значение:
//  Булево
&НаКлиенте
Функция проверитьЭтоОповещениеПодчиненнойФормы(Знач имяСобытия, Знач параметрыСобытия)
    Если имяСобытия <> "ЗаписьПрайсЛистаВДокумент" ИЛИ параметрыСобытия = Неопределено Тогда
        Возврат Ложь;
    КонецЕсли;

    создательФормы = Неопределено;
    параметрыСобытия.Свойство("СоздательФормы", создательФормы);
    Если создательФормы <> ЭтотОбъект.УникальныйИдентификатор Тогда
        Возврат Ложь;
    КонецЕсли;

    Возврат Истина;
КонецФункции

// Устарела. Необходим рефакторинг т.к. форма фактически в текущей реализации не используется
//
// Параметры:
//  параметрыСобытия - Структура, ФиксированнаяСтруктура
//      * Объект - Обработки.ЗагрузкаПрайсЛиста.Форма
// Возвращаемое значение:
//  Обработки.ЗагрузкаПрайсЛиста.Форма
&НаКлиенте
Функция получитьДанныеОповещенияЗагрузчикаПрайсЛиста(Знач параметрыСобытия)
    загрузчик = Неопределено;
    параметрыСобытия.Свойство("Объект", загрузчик);

    Возврат загрузчик;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
