#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(_, __)
    выполнитьВсеДвижения();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

#Область Движения
Процедура выполнитьВсеДвижения()
    Движения.Начисления.Записывать = Истина;
    Движения.Хозрасчетный.Записывать = Истина;
    Движения.УчетЗатрат.Записывать = Истина;

    выполнитьДвиженияПоВсемНачислениям();
    Движения.Начисления.Записать();
    Движения.Начисления.РассчитатьСуммуНачисления();

    данныеНачислений = получитьДанныеНачислений(ЭтотОбъект.Ссылка, Истина);

    Для Каждого статьяЗатратНачисления Из данныеНачислений.НачисленияПоСтатьямЗатрат Цикл
        выполнитьДвижениеУчетЗатратОборот(статьяЗатратНачисления.статьяЗатрат, статьяЗатратНачисления.Сумма);
    КонецЦикла;

    Для Каждого структураНачисления Из данныеНачислений.Начисления Цикл
        выполнитьДвижениеБУХозрасчетный(структураНачисления);
    КонецЦикла;
КонецПроцедуры

Процедура выполнитьДвиженияПоВсемНачислениям()
    Для Каждого строкаНачисления Из ЭтотОбъект.Начисления Цикл
        структураНачисления = РегистрыРасчета.Начисления.СоздатьПустуюСтруктуруНачисления();
        ЗаполнитьЗначенияСвойств(структураНачисления, строкаНачисления);

        РегистрыРасчета.Начисления.ЗаполнитьДвижениеНачисления(
            Движения.Начисления.Добавить(), ЭтотОбъект.ПериодНачисления, структураНачисления);
    КонецЦикла;
КонецПроцедуры

Процедура выполнитьДвижениеБУХозрасчетный(Знач структураНачисления)
    движение = Движения.Хозрасчетный.Добавить();
    движение.СчетДт = ПланыСчетов.Хозрасчетный.РасходыНаПродажу;
    движение.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
    движение.Период = ЭтотОбъект.Дата;
    движение.Сумма = структураНачисления.Сумма;
    движение.Содержание = "Отражено начисление заработной платы сотрудникам";
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетДт,
        движение.СубконтоДт, структураНачисления.СтатьяЗатрат);
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетКт,
        движение.СубконтоКт, структураНачисления.Сотрудник);
КонецПроцедуры

Процедура выполнитьДвижениеУчетЗатратОборот(Знач статьяЗатрат, Знач сумма)
    движение = Движения.УчетЗатрат.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.СтатьяЗатрат = статьяЗатрат;
    движение.Сумма = сумма;
КонецПроцедуры
#КонецОбласти // Движения

Функция получитьДанныеНачислений(Знач документНачисленияЗПСсылка, Знач выгрузить = Ложь)
    запрос = Новый Запрос;
    запрос.Текст =
        "ВЫБРАТЬ
        |	Начисления.Сумма КАК Сумма,
        |	Начисления.Сотрудник КАК Сотрудник,
        |	Начисления.ВидРасчета.СтатьяЗатрат КАК СтатьяЗатрат
        |ПОМЕСТИТЬ ВТ_Начисления
        |ИЗ
        |	РегистрРасчета.Начисления КАК Начисления
        |ГДЕ
        |	Начисления.Регистратор ССЫЛКА Документ.НачислениеЗарплаты
        |	И Начисления.Регистратор = &Регистратор
        |;
        |
        |// Сумма начислений по статьям затрат
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	СУММА(ВТ_Начисления.Сумма) КАК Сумма,
        |	ВТ_Начисления.СтатьяЗатрат КАК СтатьяЗатрат
        |ИЗ
        |	ВТ_Начисления КАК ВТ_Начисления
        |
        |СГРУППИРОВАТЬ ПО
        |	ВТ_Начисления.СтатьяЗатрат";

    запрос.УстановитьПараметр("Регистратор", документНачисленияЗПСсылка);
    результатЗапроса = запрос.ВыполнитьПакетСПромежуточнымиДанными();

    ДиагностикаКлиентСервер.Утверждение(результатЗапроса.Количество() = 2,
            "В пакете должно быть два запроса.");

    ключиРезультата = "Начисления, НачисленияПоСтатьямЗатрат";
    результат = ?(выгрузить,
            Новый ФиксированнаяСтруктура(ключиРезультата,
                результатЗапроса[0].Выгрузить(), результатЗапроса[1].Выгрузить()),
            Новый ФиксированнаяСтруктура(ключиРезультата,
                результатЗапроса[0].Выбрать(), результатЗапроса[1].Выбрать()));

    Возврат результат;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
