#Область ОписаниеПеременных

&НаКлиенте
Перем _ВидыОперацийРасходаДенег;

&НаКлиенте
Перем _ТипыКонтрагентов;

&НаКлиенте
Перем _Состояние;

#КонецОбласти // ОписаниеПеременных

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(_)
    инициализация();

    поляИзменяющиеТипФормы = Новый Массив;
    поляИзменяющиеТипФормы.Добавить(Элементы.Получатель);
    поляИзменяющиеТипФормы.Добавить(Элементы.ВидОперации);

    Для Каждого поле Из поляИзменяющиеТипФормы Цикл
        применитьНастройкиПолейФормы(Новый Структура("УправляющееПоле", поле));
    КонецЦикла;

КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(_)
    изменитьТипФормы(Элементы.ВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(_)
    изменитьТипФормы(Элементы.Получатель);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область СлужебныеПроцедурыИФункции

// Изменяет тип отображения формы в зависимости от указанного значения управляющего поля формы
//
// Параметры:
//	управляющееПоле - ПолеФормы - управляющее поле формы из списка: [ВидОперации | Получатель]
//
&НаКлиенте
Асинх Процедура изменитьТипФормы(управляющееПоле)
    имяУправляющегоРеквизита = управляющееПоле.Имя;

    Если НЕ проверитьДопустимоеУправляющееПоле(управляющееПоле) Тогда
        ВызватьИсключение "Недопустимое значение управляющего поля (реквизита) формы";
    КонецЕсли;

    поляДляОчистки = Новый Массив;

    параметрыОтображенияПолей = получитьНастройкиОтображенияПолей(Элементы[имяУправляющегоРеквизита]);
    Для Каждого поле Из параметрыОтображенияПолей.СкрываемыеПоля Цикл
        Если ЗначениеЗаполнено(поле.ТекстРедактирования) Тогда
            поляДляОчистки.Добавить(поле.Имя);
        КонецЕсли;
    КонецЦикла;

    текстВопроса = сформироватьТекстЗапросаОчисткиПолей(имяУправляющегоРеквизита, поляДляОчистки);
    применитьИзменения = Истина;

    Если поляДляОчистки.Количество() > 0 И ЗначениеЗаполнено(текстВопроса) Тогда
        кодВозврата = Ждать ВопросАсинх(текстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");
        отменитьИзменение = кодВозврата <> КодВозвратаДиалога.Да;

        Если отменитьИзменение Тогда
            Объект[имяУправляющегоРеквизита] = _Состояние[имяУправляющегоРеквизита]; // Возврат значений полей (отмена очистки)
            применитьИзменения = Ложь;
        Иначе
            очиститьНеиспользуемыеРеквизитыФормы(поляДляОчистки);
        КонецЕсли;
    КонецЕсли;

    Если применитьИзменения Тогда
        применитьНастройкиПолейФормы(параметрыОтображенияПолей);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура установитьНастройкиПоляПолучатель(Знач типПолучателя, Знач типКонтрагента = Неопределено)
    ДиагностикаКлиентСервер.Утверждение(
        типПолучателя = Тип("СправочникСсылка.Сотрудники")
            ИЛИ типПолучателя = Тип("СправочникСсылка.Контрагенты")
            ИЛИ типПолучателя = Тип("СправочникСсылка.Банки"),
            "Указанный ТипПолучателя имеет недопустимое значение.
            |ТипПолучателя должен принимать значение в диапазоне: [
            |   СправочникСсылка.Сотрудники,
            |   СправочникСсылка.Контрагенты,
            |   СправочникСсылка.Банки
            |]",
            получитьКонтекстДиагностики("установитьНастройкиПоляПолучатель"));

    ДиагностикаКлиентСервер.Утверждение(
        типКонтрагента = Неопределено
            ИЛИ типКонтрагента = _ТипыКонтрагентов.Клиент
            ИЛИ типКонтрагента = _ТипыКонтрагентов.Поставщик,
            "Указанный ТипКонтрагента имеет недопустимое значение.
            |ТипКонтрагента должен принимать значение в диапазоне: [
            |   ТипыКонтрагентов.Клиент,
            |   ТипыКонтрагентов.Поставщик
            |]",
            получитьКонтекстДиагностики("установитьНастройкиПоляПолучатель"));

    Элементы.Получатель.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);

    массивОграничений = Новый Массив;
    массивОграничений.Добавить(типПолучателя);

    описаниеТипаПолучателя = Новый ОписаниеТипов(массивОграничений);
    Элементы.Получатель.ОграничениеТипа = описаниеТипаПолучателя;

    Если типПолучателя = Тип("СправочникСсылка.Контрагенты") И типКонтрагента <> Неопределено Тогда
        параметрыВыбораПолучателя = Новый Массив;
        параметрыВыбораПолучателя.Добавить(Новый ПараметрВыбора("Отбор.ТипКонтрагента", типКонтрагента));

        Элементы.Получатель.ПараметрыВыбора = Новый ФиксированныйМассив(параметрыВыбораПолучателя);
    КонецЕсли;
КонецПроцедуры

// Параметры:
//	настройкиПолей - Структура
&НаКлиенте
Процедура применитьНастройкиПолейФормы(Знач настройкиПолей)
    Если настройкиПолей = Неопределено ИЛИ ТипЗнч(настройкиПолей) <> Тип("Структура") Тогда
        ВызватьИсключение "Недопустимое значение параметров настраиваемых полей формы";
    КонецЕсли;

    Если (НЕ настройкиПолей.Свойство("ЗначенияУстановлены")) И настройкиПолей.Свойство("УправляющееПоле") Тогда
        настройкиПолей = получитьНастройкиОтображенияПолей(настройкиПолей.УправляющееПоле);
    КонецЕсли;

    Для Каждого поле Из настройкиПолей.СкрываемыеПоля Цикл
        поле.Видимость = Ложь;
    КонецЦикла;

    Для Каждого поле Из настройкиПолей.ОтображаемыеПоля Цикл
        поле.Видимость = Истина;
    КонецЦикла;

    Если настройкиПолей.ТипПолучателя <> Неопределено И Элементы.Получатель.Видимость Тогда
        типПолучателя = ?(настройкиПолей.ТипПолучателя = _ТипыКонтрагентов.Клиент
                ИЛИ настройкиПолей.ТипПолучателя = _ТипыКонтрагентов.Поставщик,
                Тип("СправочникСсылка.Контрагенты"), настройкиПолей.ТипПолучателя);

        типПолучателя = настройкиПолей.ТипПолучателя;
        типКонтрагента = Неопределено;
        Если типПолучателя = _ТипыКонтрагентов.Клиент ИЛИ типПолучателя = _ТипыКонтрагентов.Поставщик Тогда
            типПолучателя = Тип("СправочникСсылка.Контрагенты");
            типКонтрагента = настройкиПолей.ТипПолучателя;
        КонецЕсли;
        установитьНастройкиПоляПолучатель(типПолучателя, типКонтрагента);

    ИначеЕсли НЕ Элементы.Получатель.Видимость Тогда // Очистить фильтры Получателя
        Элементы.Получатель.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
        Элементы.Получатель.ОграничениеТипа = Новый ОписаниеТипов(Новый Массив);
    КонецЕсли;

    _Состояние[настройкиПолей.УправляющееПоле.Имя] = Объект[настройкиПолей.УправляющееПоле.Имя];
КонецПроцедуры

// Формирует строку вопроса для подтверждения очистки значений реквизитов
//
// Параметры:
//	имяУправляющегоПоля - Строка - имя управляющего поля (реквизита) при изменения которого выполняется очистка
//	поляДляОчистки - Массив - список имен реквизитов запрашиваемых для очистки
//
// Возвращаемое значение:
// Строка, Неопределено - текст вопроса, или Неопределено если список реквизитов пустой
//
&НаКлиенте
Функция сформироватьТекстЗапросаОчисткиПолей(Знач имяУправляющегоПоля, поляДляОчистки)
    Если поляДляОчистки = Неопределено ИЛИ поляДляОчистки.Количество() = 0 Тогда
        Возврат Неопределено;
    КонецЕсли;

    текстВопроса = СтрШаблон("При изменении реквизита ""%1"" будут очищены следующие данные:", имяУправляющегоПоля);

    Для Каждого поле Из поляДляОчистки Цикл
        текстВопроса = текстВопроса + "
            | - %1";

        текстВопроса = СтрШаблон(текстВопроса, поле);
    КонецЦикла;

    Если ЗначениеЗаполнено(поляДляОчистки) Тогда
        текстВопроса = текстВопроса + "
            | Продолжить?";
    Иначе
        текстВопроса = Неопределено;
    КонецЕсли;

    Возврат текстВопроса;
КонецФункции

// Выполняет проверку является ли указанное имя реквизита именем управляющего пол: ВидОперации | Получатель
//
// Параметры:
//	управляющееПоле - ПолеФормы
//
// Возвращаемое значение:
//	Булево - Истина если проверка успешна
&НаКлиенте
Функция проверитьДопустимоеУправляющееПоле(управляющееПоле)
    Если управляющееПоле = Элементы.ВидОперации
        ИЛИ управляющееПоле = Элементы.Получатель Тогда

        Возврат Истина;
    КонецЕсли;

    Возврат Ложь;
КонецФункции

// Выполняет очистку ранее заполненных значений полей формы
//
// Параметры:
//	поляДляОчистки - Массив - Массив имен полей (реквизитов) для очистки
&НаКлиенте
Процедура очиститьНеиспользуемыеРеквизитыФормы(поляДляОчистки)
    Для Каждого имяРеквизита Из поляДляОчистки Цикл
        Объект[имяРеквизита] = Неопределено;
    КонецЦикла;
КонецПроцедуры

// Параметры:
//	управляющееПоле - ЭлементФормы - ВидОперации, Получатель
//
// Возвращаемое значение:
//	- Структура, Неопределено
&НаКлиенте
Функция получитьНастройкиОтображенияПолей(Знач управляющееПоле)

    Если управляющееПоле = Элементы.ВидОперации Тогда
        Возврат получитьСкрываемыеПоляПриИзмененииВидаОперации();

    ИначеЕсли управляющееПоле = Элементы.Получатель Тогда
        Возврат получитьСкрываемыеПоляПриИзмененииПолучателя();

    КонецЕсли;

    Возврат Неопределено;

КонецФункции

// Определяет список скрываемых и отображаемых полей и тип значения поля Получатель при изменении
// значения поля ВидаОперации
//
// Возвращаемое значение:
//	- Структура
&НаКлиенте
Функция получитьСкрываемыеПоляПриИзмененииВидаОперации()
    ДиагностикаКлиентСервер.Утверждение(ЗначениеЗаполнено(Объект.ВидОперации)
        И проверитьЭтоДопустимыйВидОперации(Объект.ВидОперации),
        "Недопустимый вид операции",
        "СписаниеСРасчетногоСчета.получитьСкрываемыеПоляПриИзмененииВидаОперации");

    скрываемыеПоля = Новый Структура;
    изменяемыеПоля = Новый Массив;
    типПолучателя = Неопределено;

    изменяемыеПоля.Добавить(Элементы.ДоговорКонтрагента);
    изменяемыеПоля.Добавить(Элементы.РасчетныйСчет);

    типПолучателя = определитьТипПолучателяПоВидуОперации();

    Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
        Если НЕ этоОплатаПоставщику() Тогда
            скрываемыеПоля.Вставить(Элементы.ДоговорКонтрагента.Имя, Элементы.ДоговорКонтрагента);
        КонецЕсли;
        Если НЕ этоВзносНаличнымиВБанк() Тогда
            скрываемыеПоля.Вставить(Элементы.РасчетныйСчет.Имя, Элементы.РасчетныйСчет);
        КонецЕсли;
    КонецЕсли;

    Возврат создатьОбъектПараметровНастраиваемогоПоля(Элементы.ВидОперации, скрываемыеПоля, изменяемыеПоля, типПолучателя);
КонецФункции

// Определяет список скрываемых и отображаемых полей при изменении значения управляющего поля Получатель
//
// Возвращаемое значение:
//	- Структура
&НаКлиенте
Функция получитьСкрываемыеПоляПриИзмененииПолучателя()
    скрываемыеПоля = Новый Структура;
    изменяемыеПоля = Новый Массив;

    изменяемыеПоля.Добавить(Элементы.ДоговорКонтрагента);

    Если ЗначениеЗаполнено(Объект.Получатель) И (НЕ этотКонтрагентПоставщик(Объект.Получатель)) Тогда
        скрываемыеПоля.Вставить(Элементы.ДоговорКонтрагента.Имя, Элементы.ДоговорКонтрагента);
    КонецЕсли;

    Возврат создатьОбъектПараметровНастраиваемогоПоля(Элементы.Получатель, скрываемыеПоля, изменяемыеПоля);
КонецФункции

// Создает объект параметров настраиваемых полей формы при указанном значении управляющего поля
//
// Параметры:
//	управляющееПоле - ПолеФормы - управляющее поле формы: ВидОперации | Получатель
//	скрываемыеПоля - Структура - список имен и значений скрываемых полей вида: [{Ключ: Строка -> ИмяПоляФормы, Значение: ПолеФормы}]
//	изменяемыеПоля - Массив - список всех полей формы настраиваемых управляющим полем
//	типПолучателя - Тип, Неопределено - Тип значения поля Получатель при выбранном значении управляющего поля
//
// Возвращаемое значение:
//	- Структура - объект параметров отображения настраиваемого поля
&НаКлиенте
Функция создатьОбъектПараметровНастраиваемогоПоля(Знач управляющееПоле, Знач скрываемыеПоля,
        Знач изменяемыеПоля, Знач типПолучателя = Неопределено)

    отображаемыеПоля = Новый Массив;
    Для Каждого поле Из изменяемыеПоля Цикл
        Если НЕ (скрываемыеПоля.Свойство(поле.Имя) ИЛИ поле.Видимость) Тогда
            отображаемыеПоля.Добавить(поле);
        КонецЕсли;
    КонецЦикла;

    скрываемыеПоляМассив = Новый Массив;
    Для Каждого элемент Из скрываемыеПоля Цикл
        Если элемент.Значение.Видимость Тогда
            скрываемыеПоляМассив.Добавить(элемент.Значение);
        КонецЕсли;
    КонецЦикла;

    результат = Новый Структура;
    результат.Вставить("ОтображаемыеПоля", отображаемыеПоля);
    результат.Вставить("УправляющееПоле", управляющееПоле);
    результат.Вставить("СкрываемыеПоля", скрываемыеПоляМассив);
    результат.Вставить("ТипПолучателя", типПолучателя);
    результат.Вставить("ЗначенияУстановлены", Истина);

    Возврат результат;
КонецФункции

// Возвращаемое значение:
//	- ПеречислениеСсылка.ТипыКонтрагентов - Если плательщиком должен быть Контрагент.
//  - Тип - Тип("СправочникСсылка.Сотрудники"), Тип("СправочникСсылка.Банки") - Если плательщиком должен быть Сотрудник или Банк.
//  - Неопределено - Есл тип Плательщика не определен для вида операции.
&НаКлиенте
Функция определитьТипПолучателяПоВидуОперации()
    типКонтрагента = Неопределено;

    Если этоВыдачаДенегПодотчетнику() Тогда
        типКонтрагента = Тип("СправочникСсылка.Сотрудники");

    ИначеЕсли этоВзносНаличнымиВБанк() Тогда
        типКонтрагента = Тип("СправочникСсылка.Банки");

    ИначеЕсли этоОплатаПоставщику() Тогда
        типКонтрагента = _ТипыКонтрагентов.Поставщик;

    ИначеЕсли этоВозвратДенегПокупателю() Тогда
        типКонтрагента = _ТипыКонтрагентов.Клиент;

    КонецЕсли;

    Возврат типКонтрагента;
КонецФункции

&НаКлиенте
Функция проверитьЭтоДопустимоеЗначениеУправляющегоПоля(Знач значение, Знач допустимыеЗначения)
    результат = Ложь;
    Для Каждого элемент Из допустимыеЗначения Цикл
        результат = элемент.Значение = значение;
        Если результат Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;

    Возврат результат;
КонецФункции

&НаКлиенте
Функция проверитьЭтоДопустимыйВидОперации(Знач видОперации)
    Возврат проверитьЭтоДопустимоеЗначениеУправляющегоПоля(видОперации, _ВидыОперацийРасходаДенег);
КонецФункции

#Область СлужебныеПоля
// Параметры:
//	плательщикСсылка - СправочникСсылка.Контрагенты, Произвольный
//
// Возвращаемое значение:
//	- Булево
&НаСервереБезКонтекста
Функция этотКонтрагентПоставщик(Знач плательщикСсылка)
    Возврат Справочники.Контрагенты.ЭтотКонтрагентПоставщик(плательщикСсылка);
КонецФункции

// Возвращаемое значение:
//	- Булево
&НаКлиенте
Функция этоВзносНаличнымиВБанк()
    Возврат Объект.ВидОперации = _ВидыОперацийРасходаДенег.ВзносНаличнымиВБанк;
КонецФункции

// Возвращаемое значение:
//	- Булево
&НаКлиенте
Функция этоОплатаПоставщику()
    Возврат Объект.ВидОперации = _ВидыОперацийРасходаДенег.ОплатаПоставщику;
КонецФункции

// Возвращаемое значение:
//	- Булево
&НаКлиенте
Функция этоВозвратДенегПокупателю()
    Возврат Объект.ВидОперации = _ВидыОперацийРасходаДенег.ВозвратДенегПокупателю;
КонецФункции

// Возвращаемое значение:
//	- Булево
&НаКлиенте
Функция этоВыдачаДенегПодотчетнику()
    Возврат Объект.ВидОперации = _ВидыОперацийРасходаДенег.ВыдачаДенегПодотчетнику;
КонецФункции

// Параметры:
//  имяФункции - Строка
// Возвращаемое значение:
//	- Строка
&НаКлиенте
Функция получитьКонтекстДиагностики(Знач имяФункции)
    Возврат СтрШаблон("%1.%2", "СписаниеСРасчетногоСчета.ФормаДокумента", имяФункции);
КонецФункции
#КонецОбласти // СлужебныеПоля

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область Инициализация

&НаКлиенте
Процедура инициализация()
    значенияПеречислений = получитьЗначенияПеречислений();
    _ВидыОперацийРасходаДенег = значенияПеречислений.ВидыОперацийРасходаДенег;
    _ТипыКонтрагентов = значенияПеречислений.ТипыКонтрагентов;

    Если Объект.Ссылка.Пустая() Тогда
        заполнитьПоляФормыЗначениямиПоУмолчанию(НЕ ЗначениеЗаполнено(Объект.ДокументОснование));
    КонецЕсли;

    _Состояние = Новый Структура("ВидОперации, Получатель");
    _Состояние.ВидОперации = Объект.ВидОперации;
    _Состояние.Получатель = Объект.Получатель;
КонецПроцедуры

&НаКлиенте
Процедура заполнитьПоляФормыЗначениямиПоУмолчанию(Знач принудительно = Ложь)
    Объект.ВидОперации = ?(НЕ принудительно И ЗначениеЗаполнено(Объект.ВидОперации),
            Объект.ВидОперации, _ВидыОперацийРасходаДенег.ОплатаПоставщику);
КонецПроцедуры

// Возвращаемое значение:
//	- Структура
&НаСервереБезКонтекста
Функция получитьЗначенияПеречислений()
    результат = Новый Структура;
    результат.Вставить("ВидыОперацийРасходаДенег",
        Документы.РасходДенежныхСредств.ПолучитьРасходДенежныхСредств());
    результат.Вставить("ТипыКонтрагентов", Справочники.Контрагенты.ПолучитьТипыКонтрагентов());
    Возврат результат;
КонецФункции

#КонецОбласти // Инициализация
