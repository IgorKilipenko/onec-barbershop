#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(данныеЗаполнения, __, ___)
    заполнитьДокументНаОсновании(данныеЗаполнения);
    РаботаСДокументами.ЗаполнитьПолеАвторДокументаНаСервере(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаПроведения(отказ, __)
    движенияВыполненыУспешно = выполнитьВсеДвижения();
    Если НЕ движенияВыполненыУспешно Тогда
        отказ = Истина;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  данныеЗаполнения - ДокументСсылка.ПоступлениеУслуг, ДокументСсылка.ПоступлениеТоваров
//  - ДокументСсылка.РеализацияТоваровИУслуг, Неопределено - Ссылка на документ основание
//
// Возвращаемое значение:
//  - Булево
Функция заполнитьДокументНаОсновании(Знач данныеЗаполнения)
    Если данныеЗаполнения = Неопределено Тогда
        Возврат Ложь;
    КонецЕсли;

    // Если тип документа основания не соответствует ожидаемым типам
    типДокументаОСнования = ТипЗнч(данныеЗаполнения);
    Если НЕ (типДокументаОСнования = Тип("ДокументСсылка.ПоступлениеУслуг")
            ИЛИ типДокументаОСнования = Тип("ДокументСсылка.ПоступлениеТоваровИМатериалов")
            ИЛИ типДокументаОСнования = Тип("ДокументСсылка.РеализацияТоваровИУслуг")) Тогда

        Возврат Ложь;
    КонецЕсли;

    ДокументОснование = данныеЗаполнения.Ссылка;
    СуммаДокумента = данныеЗаполнения.СуммаДокумента;
    Касса = Справочники.Кассы.ПолучитьОсновнуюКассу();

    Если типДокументаОСнования = Тип("ДокументСсылка.РеализацияТоваровИУслуг") Тогда
        ВидОперации = Перечисления.ВидыОперацийРасходаДенег.ВозвратДенегПокупателю;
        Получатель = данныеЗаполнения.Клиент;

    Иначе // Это Поступление Товаров или Услуг
        ВидОперации = Перечисления.ВидыОперацийРасходаДенег.ОплатаПоставщику;
        Получатель = данныеЗаполнения.Поставщик;
        ДоговорКонтрагента = данныеЗаполнения.ДоговорПоставщика;
    КонецЕсли;

    Возврат Истина;
КонецФункции

#Область Движения
Функция выполнитьВсеДвижения()
    выполнитьДвижениеДенежныеСредстваРасход();
    выполнитьДвижениеБУХозрасчетный();
    Движения.Записать();

    результатКонтроляОстатковДС = выполнитьКонтрольОстатковДенежныхСредств();

    Если результатКонтроляОстатковДС.Отказ Тогда
        Для Каждого описаниеОшибки Из результатКонтроляОстатковДС.ОписанияОшибок Цикл
            сообщение = Новый СообщениеПользователю;
            сообщение.Текст = описаниеОшибки.Сообщение;
            сообщение.Поле = описаниеОшибки.Поле;
            сообщение.УстановитьДанные(ЭтотОбъект);
            сообщение.Сообщить();
        КонецЦикла;

        Возврат Ложь; // Превышены остатки ДС
    КонецЕсли;

    Возврат Истина; // Контроль прошел успешно, превышений остатков ДС нет
КонецФункции

Процедура выполнитьДвижениеБУХозрасчетный()
    аналитикаПроводки = ПолучитьАналитикуПроводки();

    Движения.Хозрасчетный.Записывать = Истина;
    движение = Движения.Хозрасчетный.Добавить();
    движение.СчетДт = аналитикаПроводки.Дебет.Счет;
    движение.СчетКт = аналитикаПроводки.Кредит.Счет;
    движение.Период = ЭтотОбъект.Дата;
    движение.Сумма = ЭтотОбъект.СуммаДокумента;
    движение.Содержание = аналитикаПроводки.СодержаниеОперации;
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетДт, движение.СубконтоДт, аналитикаПроводки.Дебет.Субконто);
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетКт, движение.СубконтоКт, аналитикаПроводки.Кредит.Субконто);
КонецПроцедуры

Процедура выполнитьДвижениеДенежныеСредстваРасход()
    движение = Движения.ДенежныеСредства.Добавить();
    движение.ВидДвижения = ВидДвиженияНакопления.Расход;
    движение.Период = Дата;
    движение.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные;
    движение.БанковскийСчетКасса = Касса;
    движение.Сумма = СуммаДокумента;

    Движения.ДенежныеСредства.БлокироватьДляИзменения = Истина;
    Движения.ДенежныеСредства.Записывать = Истина;
КонецПроцедуры
#КонецОбласти // Движения

Функция выполнитьКонтрольОстатковДенежныхСредств()
    результат = Новый Структура("Отказ, ОписанияОшибок", Ложь, Новый Массив);
    остатокДС = Справочники.Кассы.ПолучитьОстатокДенежныхСредствПоКассе(
            ЭтотОбъект.Касса, Новый Граница(МоментВремени()));
    Если остатокДС = Неопределено ИЛИ остатокДС.Сумма < 0 Тогда
        форматФинансовыхДанных = "ЧДЦ=2; ЧРГ= ; ЧН=0.00";
        результат.Отказ = Истина;
        результат.ОписанияОшибок.Добавить(Новый Структура("Сообщение, Поле",
                СтрШаблон(
                    "По Кассе ""%1"" недостаточно денежных средств для списания в размере: %2.
                    |Текущий остаток на кассе: %3.",
                    остатокДС.Касса,
                    Формат(-остатокДС.Сумма, форматФинансовыхДанных),
                    Формат(ЭтотОбъект.СуммаДокумента + остатокДС.Сумма, форматФинансовыхДанных)), "СуммаДокумента"));
    КонецЕсли;

    Возврат результат;
КонецФункции

Функция ПолучитьАналитикуПроводки()
    значенияПолей = Новый Структура;
    значенияПолей.Вставить("Получатель", ЭтотОбъект.Получатель);
    значенияПолей.Вставить("РасчетныйСчет", ЭтотОбъект.РасчетныйСчет);
    значенияПолей.Вставить("Касса", ЭтотОбъект.Касса);

    Возврат Документы.РасходДенежныхСредств.ПолучитьАналитикуПроводки(ЭтотОбъект.ВидОперации, значенияПолей);
КонецФункции

#КонецОбласти
