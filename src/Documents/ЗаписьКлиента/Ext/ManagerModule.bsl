#Область ПрограммныйИнтерфейс

// Возвращает ссылку на документ РеализацияТоваровИУслуг созданный на основании документОснованиеСсылка.\
// Документ РеализацияТоваровИУслуг должен иметь статус: Проведен
//
// Параметры:
//	документОснованиеСсылка - ДокументСсылка.ЗаписьКлиента
//
// Возвращаемое значение:
//	- ДокументСсылка.РеализацияТоваровИУслуг, Неопределено
//
Функция ПолучитьДокументРеализацииНаОсновании(Знач документОснованиеСсылка) Экспорт
	Если НЕ ЗначениеЗаполнено(документОснованиеСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;

	запросДокументаРеализации = Новый Запрос;
	запросДокументаРеализации.УстановитьПараметр("Ссылка", документОснованиеСсылка);

	запросДокументаРеализации.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РеализацияТоваровИУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровИУслуг КАК РеализацияТоваровИУслуг
		|ГДЕ
		|	РеализацияТоваровИУслуг.ДокументОснование = &Ссылка
		|		И РеализацияТоваровИУслуг.Проведен
		|";

	результатЗапроса = запросДокументаРеализации.Выполнить();
	Если результатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	выборка = результатЗапроса.Выбрать();
	выборка.Следующий();

	Возврат выборка.Ссылка;

КонецФункции

// Параметры:
//	списокНоменклатуры - ТаблицаЗначений, Массив
//	минимальноеВремяОказанияУслугиВМинутах - Число, Неопределено - Минимальная длительность приема клиента, в минутах
//
// Возвращаемое значение:
//	Число - Время оказания услуг, в минутах
//
Функция РассчитатьДлительностьОказанияУслуг(Знач списокНоменклатуры, Знач минимальноеВремяОказанияУслугиВМинутах = Неопределено) Экспорт

	Если минимальноеВремяОказанияУслугиВМинутах = Неопределено Тогда
		минимальноеВремяОказанияУслугиВМинутах = ПолучитьМинимальноеВремяОказанияУслугиВМинутах();
	КонецЕсли;

	Если НЕ (ЗначениеЗаполнено(списокНоменклатуры)
			ИЛИ проверитьЭтоДопустимоеЗначениеСпискаНоменклатуры(
				списокНоменклатуры, "Документы.ЗаписьКлиента.РассчитатьДатуОкончанияЗаписи")) Тогда
		Возврат минимальноеВремяОказанияУслугиВМинутах;
	КонецЕсли;

	Если ТипЗнч(списокНоменклатуры) = Тип("Массив") Тогда
		услугиТЗ = конвертироватьМассивВТаблицуЗначений(списокНоменклатуры, "Номенклатура",
				Тип("СправочникСсылка.Номенклатура"));
	Иначе
		услугиТЗ = списокНоменклатуры;
	КонецЕсли;

	запрос = Новый Запрос;
	запрос.УстановитьПараметр("УслугиТЗ", услугиТЗ);
	
	запрос.Текст =
		"ВЫБРАТЬ
		|	УслугиТЗ.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_Услуги
		|ИЗ
		|	&УслугиТЗ КАК УслугиТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(НоменклатураТиУ.ДлительностьУслуги) КАК ДлительностьУслуги
		|ИЗ
		|	ВТ_Услуги КАК ВТ_Услуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураТиУ
		|		ПО ВТ_Услуги.Номенклатура = НоменклатураТиУ.Ссылка
		|";

	результат = запрос.Выполнить();
	Если результат.Пустой() Тогда
		Возврат минимальноеВремяОказанияУслугиВМинутах;
	КонецЕсли;

	выборка = запрос.Выполнить().Выбрать();
	выборка.Следующий();
	Возврат Макс(выборка.ДлительностьУслуги, минимальноеВремяОказанияУслугиВМинутах);
КонецФункции

// Возвращаемое значение:
//	- Число - Минимальная длительность приема клиента, в минутах
Функция ПолучитьМинимальноеВремяОказанияУслугиВМинутах() Экспорт
	Возврат 60;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Устарело. Необходимо перенести в общий модуль
//
// Параметры:
//	массивЗначений - Массив - Массив значений колонки
//	имяКолонки - Строка
//	типЗначенийКолонки - Тип, Строка, ОписаниеТипов, Неопределено
//
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция конвертироватьМассивВТаблицуЗначений(Знач массивЗначений, Знач имяКолонки, Знач типЗначенийКолонки = Неопределено)
	// Блок диагностики аргументов
	диагностикаКонтекстПроверки = "Документы.ЗаписьКлиента.КонвертироватьМассивВТаблицуЗначений";

	ДиагностикаКлиентСервер.Утверждение(массивЗначений <> Неопределено И ТипЗнч(массивЗначений) = Тип("Массив"),
			СтрШаблон("Аргумент ""%1"" %2", "МассивЗначений", "имеет недопустимое значение или Неопределено"),
			диагностикаКонтекстПроверки);

	ДиагностикаКлиентСервер.Утверждение(имяКолонки <> Неопределено И ТипЗнч(имяКолонки) = Тип("Строка"),
			СтрШаблон("Аргумент ""%1"" %2", "ИмяКолонки", "имеет недопустимое значение или Неопределено"),
			диагностикаКонтекстПроверки);
	// Конец блока диагностики аргументов

	результатТЗ = Новый ТаблицаЗначений;
	описаниеТиповКолонки = Неопределено;
	Если ТипЗнч(типЗначенийКолонки) = Тип("ОписаниеТипов") Тогда
		описаниеТиповКолонки = типЗначенийКолонки;
	ИначеЕсли ТипЗнч(типЗначенийКолонки) = Тип("Тип") Тогда
		массивТиповКолонки = Новый Массив;
		массивТиповКолонки.Добавить(типЗначенийКолонки);
		описаниеТиповКолонки = Новый ОписаниеТипов(массивТиповКолонки);
	ИначеЕсли ТипЗнч(типЗначенийКолонки) = Тип("Строка") Тогда
		описаниеТиповКолонки = Новый ОписаниеТипов(типЗначенийКолонки);
	КонецЕсли;

	результатТЗ.Колонки.Добавить(имяКолонки, описаниеТиповКолонки);
	Для Каждого элемент Из массивЗначений Цикл
		стрТЗ = результатТЗ.Добавить();
		стрТЗ[имяКолонки] = элемент;
	КонецЦикла;

	Возврат результатТЗ;
КонецФункции

// Если проверка не пройдена - вызывает исключение
//
// Параметры:
//	списокНоменклатуры - ТаблицаЗначений, Массив
//	контекстДиагностики - Строка
//
// Возвращаемое значение:
//	Булево
Функция проверитьЭтоДопустимоеЗначениеСпискаНоменклатуры(Знач списокНоменклатуры, контекстДиагностики = Неопределено)
	контекстДиагностики = ?(ЗначениеЗаполнено(контекстДиагностики),
			контекстДиагностики, "Документы.ЗаписьКлиента.проверитьЭтоДопустимоеЗначениеСпискаНоменклатуры");
	имяАргументаДиагностики = "СписокНоменклатуры";
	имяКолонкиНоменклатура = "Номенклатура";
	типЗнчСпискаНоменклатуры = ТипЗнч(списокНоменклатуры);

	этоДопустимыйТипСпискаНоменклатуры = типЗнчСпискаНоменклатуры = Тип("ТаблицаЗначений")
		ИЛИ типЗнчСпискаНоменклатуры = Тип("Массив");

	ДиагностикаКлиентСервер.Утверждение(списокНоменклатуры <> Неопределено,
		СтрШаблон("Аргумент ""%1"" не может иметь значение ""Неопределено""",
			имяАргументаДиагностики),
		контекстДиагностики);

	ДиагностикаКлиентСервер.Утверждение(этоДопустимыйТипСпискаНоменклатуры,
		СтрШаблон("Аргумент ""%1"" имеет недопустимый тип ""%2"" значения",
			имяАргументаДиагностики, имяКолонкиНоменклатура),
		контекстДиагностики);

	ДиагностикаКлиентСервер.Утверждение(типЗнчСпискаНоменклатуры <> Тип("ТаблицаЗначений")
		ИЛИ списокНоменклатуры.Колонки.Найти(имяКолонкиНоменклатура) <> Неопределено,
		СтрШаблон("Аргумент ""%1"" типа ""ТаблицаЗначений"" и должен иметь колонку ""%2""",
			имяАргументаДиагностики, имяКолонкиНоменклатура),
		контекстДиагностики);

	Возврат Истина;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
