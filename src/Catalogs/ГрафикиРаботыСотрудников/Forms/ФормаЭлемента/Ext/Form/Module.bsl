#Область ОписаниеПеременных

&НаКлиенте
Перем _Перечисления;

#КонецОбласти // ОписаниеПеременных

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(_)
    инициализация();
    установитьВидимостьЭлементовФормы();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьГрафик(_)
    Объект.СписокДней.Очистить();

    Если Объект.СпособЗаполнения = _Перечисления.ТипыГрафиковРаботы.ПятидневнаяРабочаяНеделя Тогда
        заполнитьГрафикПятидневки();
    ИначеЕсли Объект.СпособЗаполнения = _Перечисления.ТипыГрафиковРаботы.Циклический Тогда
        заполнитьЦиклическийГрафик();
    Иначе
        ДиагностикаКлиентСервер.Утверждение(Ложь,
            СтрШаблон("СпособЗаполнения должен иметь значение из списка: [
                |   ПятидневнаяРабочаяНеделя,
                |   Циклический
                |]."));
    КонецЕсли;

    ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьВГрафикиПредприятия(_)
    Если Объект.Ссылка.Пустая() ИЛИ ЭтотОбъект.Модифицированность Тогда
        текстВопроса =
            "Перед загрузкой графика необходимо записать данные текущего графика.
            |Записать текущие данные?";
        кодВозврата = Ждать ВопросАсинх(текстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");

        Если кодВозврата = КодВозвратаДиалога.Да Тогда
            ЭтотОбъект.Записать(Новый Структура);
        Иначе
            Возврат;
        КонецЕсли;
    КонецЕсли;

    списокДней = подготовитьДанныеДляЗагрузкиГрафика();
    сообщение = Новый СообщениеПользователю;
    Если ЗначениеЗаполнено(списокДней) Тогда
        записатьГрафикПредприятияНаСервере(Объект.Ссылка, списокДней);
        сообщение.Текст = СтрШаблон("График работы %1 успешно загружен.", Объект.Наименование);
    Иначе
        сообщение.Текст = "График работы не содержит данных, сначала заполните график работы!";
    КонецЕсли;

    сообщение.Сообщить();
КонецПроцедуры


#КонецОбласти // ОбработчикиКомандФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособЗаполненияПриИзменении(_)
    установитьВидимостьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(элемент)
    Если НЕ проверитьКорректностьПериода(элемент.Имя) Тогда
        Объект.НачалоПериода = '00010101';
        Возврат;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(элемент)
    Если НЕ проверитьКорректностьПериода(элемент.Имя) Тогда
        Объект.КонецПериода = '00010101';
        Возврат;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура установитьВидимостьЭлементовФормы()
    этоЦикличныйГрафик = Объект.СпособЗаполнения = _Перечисления.ТипыГрафиковРаботы.Циклический;
    Элементы.ШагДней.Видимость = этоЦикличныйГрафик;
    Элементы.НачалоГрафика.Видимость = этоЦикличныйГрафик;
КонецПроцедуры

&НаКлиенте
Функция проверитьКорректностьПериода(Знач имяПоля)
    Если ЗначениеЗаполнено(Объект.КонецПериода) И Объект.НачалоПериода > Объект.КонецПериода Тогда
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = "Начало периода не может быть больше окончания!";
        сообщение.КлючДанных = Объект.Ссылка;
        сообщение.ПутьКДанным = "Объект";
        сообщение.Поле = имяПоля;
        сообщение.Сообщить();

        Возврат Ложь;
    КонецЕсли;

    Возврат Истина;
КонецФункции

&НаКлиенте
Процедура заполнитьГрафикПятидневки()
    суткиВСекундах = 24 * 60 * 60;
    текущийДень = Объект.НачалоПериода;

    Пока текущийДень <= Объект.КонецПериода Цикл
        новаяСтрока = Объект.СписокДней.Добавить();
        новаяСтрока.День = текущийДень;

        этоРабочийДень = (ДеньНедели(текущийДень) < 6);

        Если этоРабочийДень Тогда
            новаяСтрока.КоличествоЧасов = Объект.КоличествоЧасов;
        КонецЕсли;

        текущийДень = текущийДень + суткиВСекундах;
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура заполнитьЦиклическийГрафик()
    суткиВСекундах = 24 * 60 * 60;
    текущийДень = Объект.НачалоПериода;
    этоРабочийДень = Объект.НачалоГрафика = 1;

    сч = 0;
    Пока текущийДень <= Объект.КонецПериода Цикл
        новаяСтрока = Объект.СписокДней.Добавить();
        новаяСтрока.День = текущийДень;

        Если этоРабочийДень Тогда
            новаяСтрока.КоличествоЧасов = Объект.КоличествоЧасов;
        КонецЕсли;

        текущийДень = текущийДень + суткиВСекундах;

        сч = сч + 1;
        этоРабочийДень = ?(сч % Объект.ШагДней = 0, НЕ этоРабочийДень, этоРабочийДень);
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция подготовитьДанныеДляЗагрузкиГрафика()
    Возврат Объект.СписокДней;
КонецФункции

&НаСервереБезКонтекста
Процедура записатьГрафикПредприятияНаСервере(Знач графикСсылка, Знач списокДней)
    Для Каждого строкаГрафика Из списокДней Цикл
        Если строкаГрафика.КоличествоЧасов <= 0 Тогда
            Продолжить;
        КонецЕсли;

        РегистрыСведений.ГрафикиРаботыПредприятия.Записать(строкаГрафика.День, графикСсылка, строкаГрафика.КоличествоЧасов);
    КонецЦикла;
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция получитьТекущуюДату()
    Возврат ТекущаяДатаСеанса();
КонецФункции

#Область Инициализация

&НаКлиенте
Процедура инициализация()
    _Перечисления = получитьЗначенияПеречислений();

    заполнитьПоляФормыЗначениямиПоУмолчанию();
КонецПроцедуры

&НаСервереБезКонтекста
Функция получитьЗначенияПеречислений()
    значенияПеречислений = Новый Структура;

    значенияПеречислений.Вставить("ТипыГрафиковРаботы",
        РаботаСМетаданными.ПолучитьЗначенияПеречисления(Тип("ПеречислениеСсылка.ТипыГрафиковРаботы")));

    Возврат Новый ФиксированнаяСтруктура(значенияПеречислений);
КонецФункции

&НаКлиенте
Процедура заполнитьПоляФормыЗначениямиПоУмолчанию(Знач принудительно = Ложь)
    Объект.СпособЗаполнения = ?(НЕ принудительно И ЗначениеЗаполнено(Объект.СпособЗаполнения),
            Объект.СпособЗаполнения, _Перечисления.ТипыГрафиковРаботы.ПятидневнаяРабочаяНеделя);

    Если НЕ (ЗначениеЗаполнено(Объект.НачалоПериода) ИЛИ ЗначениеЗаполнено(Объект.КонецПериода)) ИЛИ принудительно Тогда
        текущДата = получитьТекущуюДату();
        Объект.НачалоПериода = НачалоГода(текущДата);
        Объект.КонецПериода = КонецГода(текущДата);
    КонецЕсли;

    Объект.НачалоГрафика = ?(Объект.НачалоГрафика = 0 ИЛИ принудительно, 1, Объект.НачалоГрафика);

КонецПроцедуры

#КонецОбласти // Инициализация
